"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[6679],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},h=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,d=c["".concat(l,".").concat(m)]||c[m]||u[m]||i;return n?a.createElement(d,o(o({ref:t},h),{},{components:n})):a.createElement(d,o({ref:t},h))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1158:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:5},o="Phasing the variant calls",s={unversionedId:"sequence_data_analysis/variant_calling_and_imputation/Phasing",id:"sequence_data_analysis/variant_calling_and_imputation/Phasing",title:"Phasing the variant calls",description:"If you got this far you should have a robust, well-QCd set of variants. But we're not done! Humans",source:"@site/docs/sequence_data_analysis/variant_calling_and_imputation/Phasing.md",sourceDirName:"sequence_data_analysis/variant_calling_and_imputation",slug:"/sequence_data_analysis/variant_calling_and_imputation/Phasing",permalink:"/whg-training-resources/sequence_data_analysis/variant_calling_and_imputation/Phasing",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/sequence_data_analysis/variant_calling_and_imputation/Phasing.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"sidebar9",previous:{title:"Variant quality control",permalink:"/whg-training-resources/sequence_data_analysis/variant_calling_and_imputation/Variant_quality_control"},next:{title:"Imputing a set of microarray data",permalink:"/whg-training-resources/sequence_data_analysis/variant_calling_and_imputation/Imputation"}},l={},p=[{value:"What has phasing done?",id:"what-has-phasing-done",level:3},{value:"Next steps",id:"next-steps",level:3}],h={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"phasing-the-variant-calls"},"Phasing the variant calls"),(0,r.kt)("p",null,"If you got this far you should have a robust, well-QCd set of variants. But we're not done! Humans\nare diploid and so we'd like to know how the variants stack up on each chromosome - that is how\nthey form ",(0,r.kt)("strong",{parentName:"p"},"haplotypes"),"."),(0,r.kt)("p",null,"We don't directly observe haplotypes but they can be inferred through a process known as\n",(0,r.kt)("strong",{parentName:"p"},"phasing"),". This is done using a statistical algorithm that iteratively updates haplotype phase\n(starting at random) by modelling each individual's haplotypes as a mosaic of segments of other\nhaplotypes in the data. (Even though this starts with random phase, people with homozygous\ngenotypes have stretches of genuine haplotype so there is some information there to start with).\n'Switches' between haplotypes generally occur at recombination hotspots, so this process also uses\nan estimate of the underlying recombination rate. This underlying model is known as the Li and\nStephens model after ",(0,r.kt)("a",{parentName:"p",href:"https://pubmed.ncbi.nlm.nih.gov/14704198/"},"the famous paper in which it was\nintroduced"),", although it has seen many updates in\npractice. Recent versions for large samples are based on the ",(0,r.kt)("a",{parentName:"p",href:"https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3998136/"},"Positional Burroughs-Wheeler\nTransform")," to quickly match haplotypes."),(0,r.kt)("p",null,"We'll use a recent implementation called EAGLE to do this."),(0,r.kt)("p",null,"One limitation is that EAGLE expectes variants to be bi-allelic. To make this true we will\nrepresent all variants as multi-allelic in the VCF file. (This doesn't change the underlying calls,\nbut we end up with multiple rows for each multi-allelic variant):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"bcftools norm -m - -Oz -o GWD_30x_calls.filtered_split_.vcf.gz GWD_30x_calls.filtered.vcf.gz\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Question.")," Compare these files (using ",(0,r.kt)("inlineCode",{parentName:"p"},"bcftools view [file] | less -S"),".)  Can you see what this has done?"),(0,r.kt)("p",null,"Now we are ready to phase.  The command is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"eagle \\\n  --geneticMapFile genetic_map/genetic_map_hg38_withX.txt.gz \\\n  --vcf GWD_30x_calls.filtered_split_.vcf.gz \\\n  --numThreads 2 \\\n  --outPrefix GWD_30x_calls.phased\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note.")," The backslash (",(0,r.kt)("inlineCode",{parentName:"p"},"\\"),") is a ",(0,r.kt)("em",{parentName:"p"},"line continuation character"),".  The above is run as a single command."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note.")," This will take a few minutes to run. As always, watch the screen output for a wealth of\ninformation about what is happening."),(0,r.kt)("h3",{id:"what-has-phasing-done"},"What has phasing done?"),(0,r.kt)("p",null,"Let's take a look at the first few variants and the first three samples.  Before phasing:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"bcftools view -H GWD_30x_calls.filtered.vcf.gz | head -20 | cut -f 10-12\n")),(0,r.kt)("p",null,"And after:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"bcftools view -H GWD_30x_calls.phased.vcf.gz | head -20 | cut -f 10-12\n")),(0,r.kt)("p",null,"You should see something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1/1:255,111,0   1/1:255,108,0   1/1:255,105,0\n0/0:0,99,255    0/0:0,102,255   0/0:0,111,255\n0/0:0,108,255   0/0:0,117,255   0/0:0,102,255\n0/0:0,102,255   0/0:0,99,255    0/0:0,96,255\n0/0:0,114,255   0/0:0,87,255    0/0:0,111,255\n0/0:0,120,255   0/0:0,99,255    0/0:0,93,255\n0/0:0,120,255   0/1:181,0,250   0/0:0,117,255\n0/0:0,75,255    0/0:0,123,255   0/0:0,120,255\n0/0:0,93,255    0/0:0,108,255   0/0:0,141,255\n0/0:0,84,255    0/0:0,93,255    0/0:0,102,255\n0/0:0,114,255   0/1:219,0,239   0/0:0,111,255\n0/1:254,0,203   0/0:0,154,255   0/0:0,111,255\n0/0:0,108,255   0/0:0,151,255   0/0:0,111,255\n1/1:255,81,0    0/1:243,0,183   1/1:255,102,0\n1/1:255,99,0    0/0:0,138,255   0/1:255,0,221\n0/0:0,105,255   0/0:0,141,255   0/0:0,141,255\n0/0:0,96,255    0/0:0,111,255   0/0:0,105,255\n0/0:0,87,255    0/0:0,111,255   0/0:0,111,255\n0/0:0,84,255    0/1:255,0,187   0/0:0,114,255\n1/1:255,99,0    0/1:158,0,255   1/1:255,126,0\n")),(0,r.kt)("p",null,"and"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1|1:255,111,0   1|1:255,108,0   1|1:255,105,0\n0|0:0,99,255    0|0:0,102,255   0|0:0,111,255\n0|0:0,108,255   0|0:0,117,255   0|0:0,102,255\n0|0:0,102,255   0|0:0,99,255    0|0:0,96,255\n0|0:0,114,255   0|0:0,87,255    0|0:0,111,255\n0|0:0,120,255   0|0:0,99,255    0|0:0,93,255\n0|0:0,120,255   1|0:181,0,250   0|0:0,117,255\n0|0:0,75,255    0|0:0,123,255   0|0:0,120,255\n0|0:0,93,255    0|0:0,108,255   0|0:0,141,255\n0|0:0,84,255    0|0:0,93,255    0|0:0,102,255\n0|0:0,114,255   1|0:219,0,239   0|0:0,111,255\n1|0:254,0,203   0|0:0,154,255   0|0:0,111,255\n0|0:0,108,255   0|0:0,151,255   0|0:0,111,255\n1|1:255,81,0    0|1:243,0,183   1|1:255,102,0\n1|1:255,99,0    0|0:0,138,255   1|0:255,0,221\n0|0:0,105,255   0|0:0,141,255   0|0:0,141,255\n0|0:0,96,255    0|0:0,111,255   0|0:0,105,255\n0|0:0,87,255    0|0:0,111,255   0|0:0,111,255\n0|0:0,84,255    1|0:255,0,187   0|0:0,114,255\n1|1:255,99,0    0|1:158,0,255   1|1:255,126,\n")),(0,r.kt)("p",null,"Phasing has ",(0,r.kt)("strong",{parentName:"p"},"not changed the genotype likelihoods")," (the numbers, in the PL field). But it has\nturned forward slashes (",(0,r.kt)("inlineCode",{parentName:"p"},"/"),") into vertical bars (",(0,r.kt)("inlineCode",{parentName:"p"},"|"),")!  Great!"),(0,r.kt)("p",null,"If you look more closely though, you'll see that Eagle has done something interesting to the\nheterozygous variants. For example, look at sample 2. It has several heterozygous genotypes that\nlook like ",(0,r.kt)("inlineCode",{parentName:"p"},"0/1"),". But phasing has turned these either into ",(0,r.kt)("inlineCode",{parentName:"p"},"0|1")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"1|0")," - it has ",(0,r.kt)("em",{parentName:"p"},"phased")," them\nrelative to each other."),(0,r.kt)("p",null,"You can interpret this as follows: for each sample (column), the number before the ",(0,r.kt)("inlineCode",{parentName:"p"},"|")," reflects the\nfirst haplotype in the sample (it might for example be the maternally-inherited chromosome,\nalthough we don't know that from this file). The number after the ",(0,r.kt)("inlineCode",{parentName:"p"},"|")," reflects the second haplotype\nin the sample (this might be the paternally inherited chromosome, say). And before a ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," means the\nhaplotype carries the reference allele and a ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," means the non-reference allele."),(0,r.kt)("p",null,"[TODO]",": plot the haplotypes."),(0,r.kt)("h3",{id:"next-steps"},"Next steps"),(0,r.kt)("p",null,"When you're read ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/sequence_data_analysis/variant_calling_and_imputation/#steps-in-the-practical"},"go back to the practical")," and go on to ",(0,r.kt)("strong",{parentName:"p"},"imputation"),"."))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[8291],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return n?a.createElement(h,s(s({ref:t},m),{},{components:n})):a.createElement(h,s({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2360:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_OmH5"};function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,s),hidden:n},t)}},9877:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(7462),r=n(7294),o=n(2389),s=n(7392),i=n(7094),l=n(2466),p=n(6010);const m={tabList:"tabList_uSqn",tabItem:"tabItem_LplD"};function u(e){const{lazy:t,block:n,defaultValue:o,values:u,groupId:c,className:d}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=u??h.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,s.l)(g,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const b=null===o?o:o??h.find((e=>e.props.default))?.props.value??h[0]?.props.value;if(null!==b&&!g.some((e=>e.value===b)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${b}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:y}=(0,i.U)(),[v,w]=(0,r.useState)(b),N=[],{blockElementScrollPositionUntilNextRender:_}=(0,l.o5)();if(null!=c){const e=k[c];null!=e&&e!==v&&g.some((t=>t.value===e))&&w(e)}const C=e=>{const t=e.currentTarget,n=N.indexOf(t),a=g[n].value;a!==v&&(_(t),w(a),null!=c&&y(c,a))},E=e=>{let t=null;switch(e.key){case"ArrowRight":{const n=N.indexOf(e.currentTarget)+1;t=N[n]||N[0];break}case"ArrowLeft":{const n=N.indexOf(e.currentTarget)-1;t=N[n]||N[N.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,p.Z)("tabs-container",m.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":n},d)},g.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>N.push(e),onKeyDown:E,onFocus:C,onClick:C},o,{className:(0,p.Z)("tabs__item",m.tabItem,o?.className,{"tabs__item--active":v===t})}),n??t)}))),t?(0,r.cloneElement)(h.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function c(e){const t=(0,o.Z)();return r.createElement(u,(0,a.Z)({key:String(t)},e))}},9528:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var a=n(7462),r=(n(7294),n(3905)),o=n(9877),s=n(2360);const i={sidebar_position:2},l="Counting genes",p={unversionedId:"programming/analysing_genes_across_species/Counting_genes_1",id:"programming/analysing_genes_across_species/Counting_genes_1",title:"Counting genes",description:"For simplicity, from here on in we will work with the GFF3 files from the [Ensembl ftp",source:"@site/docs/programming/analysing_genes_across_species/002_Counting_genes_1.md",sourceDirName:"programming/analysing_genes_across_species",slug:"/programming/analysing_genes_across_species/Counting_genes_1",permalink:"/whg-training-resources/programming/analysing_genes_across_species/Counting_genes_1",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/analysing_genes_across_species/002_Counting_genes_1.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar5",previous:{title:"Getting setup",permalink:"/whg-training-resources/programming/analysing_genes_across_species/getting_setup"},next:{title:"What's not a gene?",permalink:"/whg-training-resources/programming/analysing_genes_across_species/Counting_genes_2"}},m={},u=[{value:"Getting data",id:"getting-data",level:2},{value:"Counting genes in sqlite",id:"counting-genes-in-sqlite",level:2},{value:"Counting genes in R or python",id:"counting-genes-in-r-or-python",level:2}],c={toc:u},d="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"counting-genes"},"Counting genes"),(0,r.kt)("p",null,"For simplicity, from here on in we will work with the GFF3 files from the ",(0,r.kt)("a",{parentName:"p",href:"http://ftp.ensembl.org/pub/current_gff3/"},"Ensembl ftp\nsite")," (vertebrate genomes) or from ",(0,r.kt)("a",{parentName:"p",href:"https://ftp.ensemblgenomes.ebi.ac.uk/pub/"},"Ensembl\ngenomes")," (non-vertebrate genomes). These use the terminology ",(0,r.kt)("inlineCode",{parentName:"p"},"mRNA")," for a\ngene transcript, and they also have the genome sequence lengths written in the metadata, making life easy for us. Before\nstarting, download some of these files now. "),(0,r.kt)("p",null,"We will focus on protein-coding genes, and their transcripts, exons and coding sequence. They have type ",(0,r.kt)("inlineCode",{parentName:"p"},"gene"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"mRNA"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"exon")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"CDS")," in the files Ensembl respectively. They come in a basic hierarchy:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Each gene can have multiple transcripts (i.e. multiple expressed forms at mRNA level - e.g. they\nmight differ in how exons are spliced together, or have different transcription start or end\nsites).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Each transcript is made up of one or more exons. The introns in between are spliced out. (This\nhappens during the transcription process.)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Of the exon sequence that makes it into a transcript, only a portion is actually translated into\nthe mature protein during processing by the ribosomes. This is the ",(0,r.kt)("em",{parentName:"p"},"coding sequence")," and the rest\nis ",(0,r.kt)("em",{parentName:"p"},"untranslated sequence"),"."))),(0,r.kt)("p",null,"The files we're looking are (roughly speaking) humanities' best guess at what this picture looks like in each organism."),(0,r.kt)("h2",{id:"getting-data"},"Getting data"),(0,r.kt)("p",null,"I'm going to assume you have found a set of files from the ",(0,r.kt)("a",{parentName:"p",href:"http://ftp.ensembl.org/pub/current_gff3/"},"Ensembl ftp site")," or\nelsewhere, and run them through your ",(0,r.kt)("inlineCode",{parentName:"p"},"gff_to_sqlite.R")," program to get them into a database - say ",(0,r.kt)("inlineCode",{parentName:"p"},"genes.sqlite"),". If not\n",(0,r.kt)("strong",{parentName:"p"},"please go and do that now"),".  For example, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Rscript --vanilla gff_to_sqlite.R --attributes Name biotype --input http://ftp.ensembl.org/pub/current_gff3/homo_sapiens/Homo_sapiens.GRCh38.110.chr.gff3.gz --output genes.sqlite\nRscript --vanilla gff_to_sqlite.R --attributes Name biotype --input http://ftp.ensembl.org/pub/current_gff3/pan_troglodytes/Pan_troglodytes.Pan_tro_3.0.110.chr.gff3.gz --output genes.sqlite\nRscript --vanilla gff_to_sqlite.R --attributes Name biotype --input http://ftp.ensembl.org/pub/current_gff3/camelus_dromedarius/Camelus_dromedarius.CamDro2.110.chr.gff3.gz --output genes.sqlite\n# ...and so on\n")),(0,r.kt)("p",null,"I suggest to pick a few species for now - choose ones that interest you.  "),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"There are a lot to choose from.  For example you can get:"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"Vertebrate genomes from ",(0,r.kt)("a",{parentName:"li",href:"http://ftp.ensembl.org/pub/current_gff3/"},"Ensembl")),(0,r.kt)("li",{parentName:"ul"},"Protists from ",(0,r.kt)("a",{parentName:"li",href:"https://ftp.ensemblgenomes.ebi.ac.uk/pub/protists/current/gff3/"},"Ensembl protists")),(0,r.kt)("li",{parentName:"ul"},"Fungi from ",(0,r.kt)("a",{parentName:"li",href:"https://ftp.ensemblgenomes.ebi.ac.uk/pub/fungi/current/gff3/"},"Ensembl fungi")),(0,r.kt)("li",{parentName:"ul"},"Plants from ",(0,r.kt)("a",{parentName:"li",href:"https://ftp.ensemblgenomes.ebi.ac.uk/pub/plants/current/gff3/"},"Ensembl plants")),(0,r.kt)("li",{parentName:"ul"},"or Bacteria from ",(0,r.kt)("a",{parentName:"li",href:"https://ftp.ensemblgenomes.ebi.ac.uk/pub/bacteria/current/gff3/"},"Ensembl bacteria"))),(0,r.kt)("p",{parentName:"div"},"Yet another place to look is the ",(0,r.kt)("a",{parentName:"p",href:"https://portal.darwintreeoflife.org"},"Darwin Tree of Life Data Portal"),", which at the\ntime of writing has nearly 300 genomes in 'Annotation complete' state."))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"What are all those species?")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you're confused about how all those species relate, it's time to look at ",(0,r.kt)("a",{parentName:"p",href:"http://www.onezoom.org"},"OneZoom.org"),":"),(0,r.kt)("iframe",{src:"http://www.onezoom.org",width:"100%",height:"800px"}),(0,r.kt)("p",{parentName:"div"},"For example, did you know that Dolphins, like Camels, are ",(0,r.kt)("a",{parentName:"p",href:"http://www.onezoom.org/life/@Cetartiodactyla=622916"},"cloven-hoofed\nungulates"),"?  Did you know that all species of ape - except humans -\nare ",(0,r.kt)("a",{parentName:"p",href:"http://www.onezoom.org/life/@Catarrhini=842867?img=best_any&anim=flight#x-1130,y379,w6.2977"},"endangered or critically\nendangered"),"?"),(0,r.kt)("p",{parentName:"div"},"Another place to look is  the ",(0,r.kt)("a",{parentName:"p",href:"https://www.ensembl.org/info/about/species.html"},"Ensembl species list")," and the ",(0,r.kt)("a",{parentName:"p",href:"https://www.ensembl.org/info/about/speciestree.html"},"Ensembl\nspecies tree"),".  There are also similar pages for each of the\nbranches of life on the ",(0,r.kt)("a",{parentName:"p",href:"https://ensemblgenomes.org"},"Ensembl Genomes")," site."))),(0,r.kt)("p",null,"Pick some genomes to start with and load them into your database.  Once done, you are actually in a good shape for many\nof our scientific questions.  Let's start by counting genes:"),(0,r.kt)("h2",{id:"counting-genes-in-sqlite"},"Counting genes in sqlite"),(0,r.kt)("p",null,"A simple way to count genes is to use sqlite. For example using the sqlite file you created in the last step, you can count all gene records like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"sqlite> SELECT COUNT(*) FROM gff WHERE type == 'gene' ;\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"To run the above, you have to be working interactively in sqlite3 - you get there by typing ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlite3 genes.sqlite")," in\nthe shell. Type ",(0,r.kt)("inlineCode",{parentName:"p"},".quit")," again when you want to quit.  "),(0,r.kt)("p",{parentName:"div"},"Alternatively you can run from the shell directly, for example to produce a csv file with column names:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"% sqlite3 -csv -header genes.sqlite \"SELECT COUNT(*) FROM gff WHERE type == 'gene'\"\n")))),(0,r.kt)("p",null,"Of course, that just counts all the genes in the file - we'd like it split by species.  Simple! If you followed the\nsuggestions above your file will also have a ",(0,r.kt)("inlineCode",{parentName:"p"},"dataset")," column that lets you differentiate the records for different\nspecies. So you can make these counts for multiple species:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sqlite> .mode column\nsqlite> .header on\nsqlite> SELECT dataset, COUNT(*) FROM gff WHERE type=='gene' GROUP BY dataset ;\n")),(0,r.kt)("p",null,"In my data, which includes spiny chromis, dromedary camels, red junglefowl, humans, mice, chimpanzees, and\nmalaria parasites, this gives:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"dataset                                      COUNT(*)  \n-------------------------------------------  ----------\nAcanthochromis_polyacanthus.ASM210954v1.104  24027     \nCamelus_dromedarius.CamDro2.104.chr.gff3     18919     \nGallus_gallus.GRCg6a.104                     16666     \nHomo_sapiens.GRCh38.104                      21451     \nMus_musculus.GRCm39.104                      25655     \nPan_troglodytes.Pan_tro_3.0.104.chr          22056     \nPlasmoDB-54_Pfalciparum3D7                   5318      \n")),(0,r.kt)("p",null,"Interestingly, both ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/House_mouse"},"house mice")," and ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Spiny_chromis"},"spiny\nchromis")," have more (annotated) genes than humans.\nChimpanzees have a similar number, while ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Red_junglefowl"},"Red\njunglefowl")," and ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Dromedary"},"Dromedary\nCamels")," have respectively 17% and 5% fewer (annotated)\nprotein-coding genes than humans. ",(0,r.kt)("em",{parentName:"p"},"Plasmodium falciparum")," has about a quarter of the number of\ngenes. (But that's still pretty impressive because its genome size is less than a hundredth that of\nhumans.)"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"To make the above query work the ",(0,r.kt)("a",{parentName:"p",href:"https://plasmodb.org/plasmo/app/downloads/Current_Release/"},(0,r.kt)("em",{parentName:"a"},"P.falciparum")," data from\nPlasmoDB"),", I kludged it by running this sql:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"UPDATE gff\nSET type = 'gene', biotype = 'protein_coding'\nWHERE dataset LIKE 'PlasmoDB-%_Pfalciparum3D7'\nAND type == 'protein_coding_gene' ;\n")),(0,r.kt)("p",{parentName:"div"},"I wouldn't generally recommend this type of manually-fix-the-data-until-it-works approach\n(not least because it would have to be re-done every time we imported new data) but it'll do for this tutorial."))),(0,r.kt)("h2",{id:"counting-genes-in-r-or-python"},"Counting genes in R or python"),(0,r.kt)("p",null,"So how would we do this in R or python?  One of the messages of this tutorial is that the same operations are generally\npossible in different languages, with minor differences in syntax.  The tabs below show a few different ways:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"R",label:"R code",mdxType:"TabItem"},(0,r.kt)("p",null,"First we will load the whole dataframe into R.  To do this we have to open a 'connection' to the database and then read\nfrom it.  (We'll filter down to genes here as well, so that we don't use up too much memory)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'library( RSQLite )\nlibrary( dplyr )\ndb = DBI::dbConnect( RSQLite::SQLite(), "genes.sqlite" )\ngenes = dbGetQuery( db, "SELECT * FROM gff WHERE type == \'gene\'" )\n')),(0,r.kt)("p",null,"Now let's group by dataset, and summarise just as we did in sql:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"(\n    genes\n    %>% group_by( dataset )\n    %>% summarise( count = n() )\n)\n")),(0,r.kt)("p",null,"You should see the same output as above, but now in R:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# A tibble: 7 \xd7 2\n  dataset                                                count\n  <chr>                                                  <int>\n1 Acanthochromis_polyacanthus.ASM210954v1.110.gff3       24027\n2 Camelus_dromedarius.CamDro2.110.chr.gff3               18919\n3 Gallus_gallus.bGalGal1.mat.broiler.GRCg7b.110.chr.gff3 18121\n4 Homo_sapiens.GRCh38.110.chr.gff3                       21532\n5 Mus_musculus.GRCm39.110.chr.gff3                        5946\n6 Pan_troglodytes.Pan_tro_3.0.110.chr.gff3               22056\n7 PlasmoDB-65_Pfalciparum3D7                              5318\n"))),(0,r.kt)(s.Z,{value:"Rsql",label:"R and sql combined",mdxType:"TabItem"},(0,r.kt)("p",null,"Of course there's no particular reason not to combine R and sql in the same code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"dbGetQuery( db, \"SELECT dataset, COUNT(*) FROM gff WHERE type=='gene' GROUP BY dataset\" )\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"                                                 dataset COUNT(*)\n1       Acanthochromis_polyacanthus.ASM210954v1.110.gff3    24027\n2               Camelus_dromedarius.CamDro2.110.chr.gff3    18919\n3 Gallus_gallus.bGalGal1.mat.broiler.GRCg7b.110.chr.gff3    18121\n4                       Homo_sapiens.GRCh38.110.chr.gff3    21532\n5                       Mus_musculus.GRCm39.110.chr.gff3     5946\n6               Pan_troglodytes.Pan_tro_3.0.110.chr.gff3    22056\n7                             PlasmoDB-65_Pfalciparum3D7     5318\n")),(0,r.kt)("p",null,"(Use ",(0,r.kt)("inlineCode",{parentName:"p"},"as_tibble()")," if you want this in the form of a tidyverse tibble)."),(0,r.kt)("p",null,"This has one ",(0,r.kt)("strong",{parentName:"p"},"big advantage")," over the plain R code - it doesn't load the whole dataframe into R,\nbut just the result of the query."),(0,r.kt)("p",null,"The same advantage can be had by using ",(0,r.kt)("a",{parentName:"p",href:"dbplyr.tidyverse.org%5D"},"dbplyr")," as well - see the next tab.")),(0,r.kt)(s.Z,{value:"dbplyR",label:"dbplyr code",mdxType:"TabItem"},(0,r.kt)("p",null,"Another way to do this uses ",(0,r.kt)("a",{parentName:"p",href:"https://dbplyr.tidyverse.org"},"dbplyr"),".  dbplyr works just like dplyr, but transforms\nits work into database queries under the hood.  "),(0,r.kt)("p",null,"To try this, make sure you have a connection ",(0,r.kt)("inlineCode",{parentName:"p"},"db")," to the database (as on the 'R' tab).  You then use the dbplyr ",(0,r.kt)("inlineCode",{parentName:"p"},"tbl()"),"\nfunction to represent a database table of data which you can then operate on.  LIie this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"(\n  db\n  %>% tbl( \"gff\" )\n  %>% filter( type == 'gene' )\n  %>% group_by( dataset )\n  %>% summarise (count = n() )\n  %>% collect()\n)\n")),(0,r.kt)("p",null,"Interestingly, although this looks like R code, it is actually translating to sql code under the hood.  To see this, try\nre-running it but changing the ",(0,r.kt)("inlineCode",{parentName:"p"},"collect()")," call to ",(0,r.kt)("inlineCode",{parentName:"p"},"show_query()"),".  You should see:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SELECT `dataset`, COUNT(*) AS `count`\nFROM `gff`\nWHERE (`type` = 'gene')\nGROUP BY `dataset`\n")),(0,r.kt)("p",null,"In other words, dbplyr has worked out for itself how to crate the right query above from the R code.  LIke the combined\nR-and-sql code, this has only loaded the bits of data it needs, not the whole dataframe, into memory.")),(0,r.kt)(s.Z,{value:"python",label:"Python code",mdxType:"TabItem"},(0,r.kt)("p",null,"This can of course also be done in python / pandas.  First connect to the database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import pandas, sqlite3\ndb = sqlite3.connect( "genes.sqlite" )\n')),(0,r.kt)("p",null,"And then read from it using ",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/reference/api/pandas.read_sql.html"},"read_sql"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"genes = pandas.read_sql( \"SELECT * FROM gff WHERE type == 'gene'\", db )\n")),(0,r.kt)("p",null,"Now let's group by datasets, and summarise just as we did in sql:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'(\n    genes\n    .groupby( "dataset" )\n    .size()\n)\n')),(0,r.kt)("p",null,"This produces:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"dataset\nAcanthochromis_polyacanthus.ASM210954v1.104    24027\nCamelus_dromedarius.CamDro2.104.chr.gff3       18919\nGallus_gallus.GRCg6a.104                       16666\nHomo_sapiens.GRCh38.104                        21451\nMus_musculus.GRCm39.104                        25655\nPan_troglodytes.Pan_tro_3.0.104.chr            22056\nPlasmoDB-54_Pfalciparum3D7                      5318\ndtype: int64\n")))))}h.isMDXComponent=!0}}]);
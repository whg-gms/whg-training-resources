"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[7913],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,u=d["".concat(s,".").concat(h)]||d[h]||m[h]||r;return n?i.createElement(u,o(o({ref:t},c),{},{components:n})):i.createElement(u,o({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4872:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const r={sidebar_position:2},o="Wildcards and 'globbing'",l={unversionedId:"bioinformatics/command_line/appendices/globbing",id:"bioinformatics/command_line/appendices/globbing",title:"Wildcards and 'globbing'",description:"Globs are wildcard patterns that let the command-line match multiple files at once.",source:"@site/docs/bioinformatics/401_command_line/appendices/globbing.md",sourceDirName:"bioinformatics/401_command_line/appendices",slug:"/bioinformatics/command_line/appendices/globbing",permalink:"/whg-training-resources/bioinformatics/command_line/appendices/globbing",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/bioinformatics/401_command_line/appendices/globbing.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar2",previous:{title:"Navigating history",permalink:"/whg-training-resources/bioinformatics/command_line/appendices/navigating_history"},next:{title:"Where are the commands?",permalink:"/whg-training-resources/bioinformatics/command_line/appendices/where_are_the_commands"}},s={},p=[{value:"Using <code>*</code>",id:"using-",level:2},{value:"How globbing is processed",id:"how-globbing-is-processed",level:2},{value:"Avoiding globbing",id:"avoiding-globbing",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"wildcards-and-globbing"},"Wildcards and 'globbing'"),(0,a.kt)("p",null,"Globs are wildcard patterns that let the command-line match multiple files at once."),(0,a.kt)("h2",{id:"using-"},"Using ",(0,a.kt)("inlineCode",{parentName:"h2"},"*")),(0,a.kt)("p",null,"The most useful wildcard is ",(0,a.kt)("inlineCode",{parentName:"p"},"*"),", which means 'match anything'.  For example this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"% ls *.txt\n")),(0,a.kt)("p",null,"will list all files ending in '.txt' in the current directory."),(0,a.kt)("p",null,"A glob can have multiple '*' characters in it - e.g. to get a list of files that have 'file' in the name and end in '.txt':"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"% ls *file*.txt\n")),(0,a.kt)("p",null,"This feature can be combined with any command that uses a file, and is quite powerful.  "),(0,a.kt)("p",null,"To illustrate this, here is a command sequence that creates a new temporary folder, copies all text files into it,\nremoves ",(0,a.kt)("inlineCode",{parentName:"p"},"listing.txt"),", concatenates all the others into one big text file, and then removes the temporary files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"% mkdir tmp_folder\n% cp *.txt tmp_folder/\n% rm tmp_folder/listing.txt\n% cat tmp_folder/*.txt > concatenated.txt\n% rm tmp_folder/*.txt\n% rmdir tmp_folder\n")),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Depending on your shell, you might find that pressing ",(0,a.kt)("inlineCode",{parentName:"p"},"<tab>")," before ",(0,a.kt)("inlineCode",{parentName:"p"},"<enter>")," has the effect of ",(0,a.kt)("strong",{parentName:"p"},"expanding")," the wildcard, right there on your terminal.\nThis is what is happening under the hood: ",(0,a.kt)("inlineCode",{parentName:"p"},"*.txt")," is shorthand for typing out all the files that would match ",(0,a.kt)("inlineCode",{parentName:"p"},"*.txt"),", one by one, on the command line."))),(0,a.kt)("p",null,"Apart from ",(0,a.kt)("inlineCode",{parentName:"p"},"*"),", which is the most useful glob special character, there are a few others as well.  But '*' is the most useful."),(0,a.kt)("h2",{id:"how-globbing-is-processed"},"How globbing is processed"),(0,a.kt)("p",null,"Importantly you should realise that the shell processes globbing (and any other filename expansions) ",(0,a.kt)("em",{parentName:"p"},"before")," it passes\nthe arguments to the command.  Suppose your folder looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"file1.txt\nfile2.txt\nimage.jpg\n")),(0,a.kt)("p",null,"and you type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"% ls *\n")),(0,a.kt)("p",null,"Then, as far as ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," is concerned, this is equivalent to typing:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"ls file1.txt file2.txt image.jpg\n")),(0,a.kt)("p",null,"That is - the ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," command does not know you are using a glob, because the shell expands it beforehand."),(0,a.kt)("h2",{id:"avoiding-globbing"},"Avoiding globbing"),(0,a.kt)("p",null,"What if you don't want a glob, but want the command to see the argument you typed instead?\nThe answer is to wrap the argument in ",(0,a.kt)("strong",{parentName:"p"},"single quotes"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"% ls '*'\nls: *: No such file or directory\n")),(0,a.kt)("p",null,"Here ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," has correctly told me that I don't have a file called ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," in my directory."),(0,a.kt)("p",null,"Single quotes ",(0,a.kt)("inlineCode",{parentName:"p"},"'<something>'")," and double quotes ",(0,a.kt)("inlineCode",{parentName:"p"},'"<something>"')," behave differently in this regard - compare to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'% ls "*"\n')),(0,a.kt)("p",null,"If you want the shell not to expand what's in the quotes, use single quotes."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Question")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Another way to see what's going on is to use ",(0,a.kt)("inlineCode",{parentName:"p"},"echo")," (which you'll recall just prints out its arguments).  Try these\nthree commands:"),(0,a.kt)("pre",{parentName:"div"},(0,a.kt)("code",{parentName:"pre"},"% echo *\n% echo \"*\"\n% echo '*'\n")),(0,a.kt)("p",{parentName:"div"},"Make sure you understand the results!"))))}m.isMDXComponent=!0}}]);
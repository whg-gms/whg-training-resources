"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[1559],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(a),u=i,d=c["".concat(o,".").concat(u)]||c[u]||h[u]||r;return a?n.createElement(d,s(s({ref:t},m),{},{components:a})):n.createElement(d,s({ref:t},m))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,s=new Array(r);s[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l[c]="string"==typeof e?e:i,s[1]=l;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7341:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=a(7462),i=(a(7294),a(3905));const r={sidebar_position:4},s="Variant quality control",l={unversionedId:"sequence_data_analysis/variant_calling_and_imputation/Variant_quality_control",id:"sequence_data_analysis/variant_calling_and_imputation/Variant_quality_control",title:"Variant quality control",description:"For variant quality control we'll start with the output of bcftools call and use the various INFO",source:"@site/docs/sequence_data_analysis/variant_calling_and_imputation/Variant_quality_control.md",sourceDirName:"sequence_data_analysis/variant_calling_and_imputation",slug:"/sequence_data_analysis/variant_calling_and_imputation/Variant_quality_control",permalink:"/whg-training-resources/sequence_data_analysis/variant_calling_and_imputation/Variant_quality_control",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/sequence_data_analysis/variant_calling_and_imputation/Variant_quality_control.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"sidebar9",previous:{title:"Variant calling with bcftools",permalink:"/whg-training-resources/sequence_data_analysis/variant_calling_and_imputation/Variant_calling"},next:{title:"Phasing the variant calls",permalink:"/whg-training-resources/sequence_data_analysis/variant_calling_and_imputation/Phasing"}},o={},p=[{value:"Examining the variant call quality metrics",id:"examining-the-variant-call-quality-metrics",level:2},{value:"Plotting the metrics",id:"plotting-the-metrics",level:3},{value:"Filtering variants",id:"filtering-variants",level:3},{value:"How did filtering perform?",id:"how-did-filtering-perform",level:3},{value:"Setting the filters in stone.",id:"setting-the-filters-in-stone",level:3},{value:"Variant calling - challenge questions",id:"variant-calling---challenge-questions",level:3},{value:"Next steps",id:"next-steps",level:3}],m={toc:p},c="wrapper";function h(e){let{components:t,...r}=e;return(0,i.kt)(c,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"variant-quality-control"},"Variant quality control"),(0,i.kt)("p",null,"For variant quality control we'll start with the output of ",(0,i.kt)("inlineCode",{parentName:"p"},"bcftools")," call and use the various INFO\nfields to thin down to a more robust set of variants. (In doing this it's worth pointing out that\nthe underlying data is pretty good here - it's 30X coverage data from an Illumina Novaseq\n",(0,i.kt)("a",{parentName:"p",href:"https://www.internationalgenome.org/data-portal/data-collection/30x-grch38"},"carried out recently by the New York Genome Center")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"so variant calling is generally pretty good.  Nevertheless for best results in downstream analyses it's worth weeding out\nany fake variants as much as we can.")),(0,i.kt)("p",null,"For this part of the practical we will use a slightly larger version of the ",(0,i.kt)("inlineCode",{parentName:"p"},"bcftools call")," output\n(it contains a larger region of the genome around ",(0,i.kt)("em",{parentName:"p"},"FUT2"),".) You can find it in\n",(0,i.kt)("inlineCode",{parentName:"p"},"calls/GWD_30x_calls.vcf.gz"),"."),(0,i.kt)("h2",{id:"examining-the-variant-call-quality-metrics"},"Examining the variant call quality metrics"),(0,i.kt)("p",null,"Let's start by looking at what header fields we have available.  Still working in the terminal, try:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'zcat calls/GWD_30x_calls.vcf.gz | grep "^##.*INFO"\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note.")," That's using ",(0,i.kt)("inlineCode",{parentName:"p"},"zcat")," to decompress the file, and ",(0,i.kt)("inlineCode",{parentName:"p"},"grep")," to find metadata lines that start with '##FORMAT'\nor '##INFO' - using a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Regular_expression"},"regular expression"),"."),(0,i.kt)("p",null,"You should see this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'##INFO=<ID=INDEL,Number=0,Type=Flag,Description="Indicates that the variant is an INDEL.">\n##INFO=<ID=IDV,Number=1,Type=Integer,Description="Maximum number of raw reads supporting an indel">\n##INFO=<ID=IMF,Number=1,Type=Float,Description="Maximum fraction of raw reads supporting an indel">\n##INFO=<ID=DP,Number=1,Type=Integer,Description="Raw read depth">\n##INFO=<ID=VDB,Number=1,Type=Float,Description="Variant Distance Bias for filtering splice-site artefacts in RNA-seq data (bigger is better)",Version="3">\n##INFO=<ID=RPB,Number=1,Type=Float,Description="Mann-Whitney U test of Read Position Bias (bigger is better)">\n##INFO=<ID=MQB,Number=1,Type=Float,Description="Mann-Whitney U test of Mapping Quality Bias (bigger is better)">\n##INFO=<ID=BQB,Number=1,Type=Float,Description="Mann-Whitney U test of Base Quality Bias (bigger is better)">\n##INFO=<ID=MQSB,Number=1,Type=Float,Description="Mann-Whitney U test of Mapping Quality vs Strand Bias (bigger is better)">\n##INFO=<ID=SGB,Number=1,Type=Float,Description="Segregation based metric.">\n##INFO=<ID=MQ0F,Number=1,Type=Float,Description="Fraction of MQ0 reads (smaller is better)">\n##INFO=<ID=AC,Number=A,Type=Integer,Description="Allele count in genotypes for each ALT allele, in the same order as listed">\n##INFO=<ID=AN,Number=1,Type=Integer,Description="Total number of alleles in called genotypes">\n##INFO=<ID=DP4,Number=4,Type=Integer,Description="Number of high-quality ref-forward , ref-reverse, alt-forward and alt-reverse bases">\n##INFO=<ID=MQ,Number=1,Type=Integer,Description="Average mapping quality">\n')),(0,i.kt)("p",null,"What this is saying is that in the INFO field (column 8) we will have a lot of information.\nThis includes basic information about the reads:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The total sequencing ",(0,i.kt)("em",{parentName:"li"},"depth")," (",(0,i.kt)("inlineCode",{parentName:"li"},"DP"),") - that is, the number of reads which cover the variant."),(0,i.kt)("li",{parentName:"ul"},"The average mapping quality (",(0,i.kt)("inlineCode",{parentName:"li"},"MQ"),") of reads covering the locus"),(0,i.kt)("li",{parentName:"ul"},"The fraction of mapping quality zero reads (",(0,i.kt)("inlineCode",{parentName:"li"},"MQ0F"),") (i.e. reads whose alignment is very uncertain)."),(0,i.kt)("li",{parentName:"ul"},"The number of forward and reverse-orientation reads with each allele (",(0,i.kt)("inlineCode",{parentName:"li"},"DP4"),").")),(0,i.kt)("p",null,"It also contains information about the called genotypes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The number alternate alleles in the called genotypes (",(0,i.kt)("inlineCode",{parentName:"li"},"AC"),")"),(0,i.kt)("li",{parentName:"ul"},"The total number of alleles in the called genotype (",(0,i.kt)("inlineCode",{parentName:"li"},"AN"),").  For this high-coverage data, this is\ngenerally equal to twice the sample size, i.e. 328, because it's rare to have no coverage at a site.")),(0,i.kt)("p",null,"Finally it contains a number of statistical tests reflecting basic null hypotheses that we might\nhope to be true if the variant is real:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A test (",(0,i.kt)("inlineCode",{parentName:"p"},"RPB"),") that the variant alleles are similarly distributed in terms of position in the reads")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A test that reads with each allele have similar mapping qualities (",(0,i.kt)("inlineCode",{parentName:"p"},"MQB"),") or base qualities (",(0,i.kt)("inlineCode",{parentName:"p"},"BQB"),").")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A 'segregation-based metric' (details ",(0,i.kt)("a",{parentName:"p",href:"https://samtools.github.io/bcftools/rd-SegBias.pdf"},"here"),")\nwhich reflects a likelihood ratio test that the non-reference alleles are concentrated in a\nsubset of samples (consistent with a true variant) as opposed to uniformly distributed across\nsamples (i.e. more consistent with sequencing errors.)"))),(0,i.kt)("p",null,"Here's what that looks like for the first putative variant in the file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"bcftools view -H calls/GWD_30x_calls.vcf.gz | head -n 1 | cut -f8 | tr ';' '\\n'\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note.")," This uses ",(0,i.kt)("inlineCode",{parentName:"p"},"bcftools view -H")," to output the data rows skipping the metadata, ",(0,i.kt)("inlineCode",{parentName:"p"},"head")," to\nextract the first row, ",(0,i.kt)("inlineCode",{parentName:"p"},"cut")," to pull out the 8th column and ",(0,i.kt)("inlineCode",{parentName:"p"},"tr")," to turn semicolons into newlines so we can read it.  It produces:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"DP=2053\nVDB=0\nSGB=172.684\nRPB=0.388264\nMQB=1\nMQSB=1\nBQB=0.195049\nMQ0F=0\nAC=108\nAN=328\nDP4=695,649,346,315\nMQ=60\n")),(0,i.kt)("p",null,"So, across samples there are 695 forward and 649 reverse-orientation reads with the reference\nallele, and 346 and 315 with the alt allele. (This is only 2,005 so there are presumably 48 reads\nwith other alleles as well - possibly due to errors.) None of these reads have mapping quality zero\nand there is little evidence of position, mapping or base quality bias. And the average mapping\nquality is 60 - pretty good!  "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Question.")," What is the allele frequency? (Hint: use the ",(0,i.kt)("inlineCode",{parentName:"p"},"AC")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"AN")," fields.)"),(0,i.kt)("h3",{id:"plotting-the-metrics"},"Plotting the metrics"),(0,i.kt)("p",null,"To examine these in more detail let's load them into python. Because the VCF format is a bit\ncomplex, the simplest way is to use ",(0,i.kt)("inlineCode",{parentName:"p"},"bcftools")," to extract the fields in a table. That can be done\nin the terminal like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"bcftools query -f '%POS\\t%DP\\t%QUAL\\t%SGB\\t%RPB\\t%MQB\\t%MQSB\\t%BQB\\t%MQ0F\\t%AC\\t%AN\\t%MQ\\n' calls/GWD_30x_calls.vcf.gz > GWD_30x_variant_info.tsv\n")),(0,i.kt)("p",null,"(I've removed ",(0,i.kt)("inlineCode",{parentName:"p"},"VDB")," which is for RNA-seq data.)"),(0,i.kt)("p",null,"To look at this in python we'll be using the ",(0,i.kt)("a",{parentName:"p",href:"https://pandas.pydata.org"},"pandas dataframe library"),"\nto manipulate data and the ",(0,i.kt)("inlineCode",{parentName:"p"},"os")," module to handle the filesystem."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Switch to a python notebook")," now and let's get started by importing these and changing to the right directory:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'# in a python notebook, not the terminal!\nimport os\nimport pandas as pd\nos.chdir( "variant_calling_and_imputation")\n')),(0,i.kt)("p",null,"Now let's use pandas to load the VCF data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"info = pd.read_csv(\n    'GWD_30x_variant_info.tsv',\n    sep = '\\t', \n    names = ['pos','dp','qual','sgb','rpb','mqb','mqsb','bqb','mq0f','ac','an','mq'],\n    na_values = ['.']\n)\n\nprint(info)\n\nprint(info.shape[0]) # the number of rows, i.e. variants\n")),(0,i.kt)("p",null,"Let's also import the field names for reference:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"columns_to_plot = [\n    'dp', # 'Raw read depth',\n    'mq', #'Average mapping quality'\n    'mq0f', # 'Fraction of MQ0 reads\\n(smaller is better)',\n    'ac', # 'Allele count in genotypes for each ALT allele, in the same order as listed',\n    'an', # 'Total number of alleles in called genotypes',\n    'qual', # 'Phred-scaled quality score for the assertion made in ALT',\n    'rpb', # 'Mann-Whitney U test of Read Position Bias\\n(bigger is better)',\n    'mqb', # 'Mann-Whitney U test of Mapping Quality Bias\\n(bigger is better)',\n    'bqb', # 'Mann-Whitney U test of Base Quality Bias\\n(bigger is better)',\n    'mqsb', # 'Mann-Whitney U test of Mapping Quality vs Strand Bias\\n(bigger is better)',\n    'sgb', # 'Segregation based metric'\n]\n")),(0,i.kt)("p",null,"We are ready to plot the values of the metrics across all variants in the file. There are 11\nmetrics in total (I removed the RNA-seq specific one), so in the next code we use\n",(0,i.kt)("a",{parentName:"p",href:"https://matplotlib.org"},"matplotlib")," to create a multi-panel plot made up of 11 'subplots'. Then we\niterate through the fields and histogram them."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"import matplotlib.pyplot as plt\nfig, axs = plt.subplots(figsize=(24,16), nrows = 3, ncols = 4 )\nfor i, f in enumerate(columns_to_plot):\n    _ = axs[i//4,i%4].hist( info[f], 50 )\n    _ = axs[i//4,i%4].set_xlabel( f.upper() )\n    axs[i//4,i%4].set_title( f.upper() )\nplt.tight_layout()\n")),(0,i.kt)("p",null,"If you stare at these plots for a while you should see:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The total depth is generally around 6,000 but some variants have much lower depth (and some much higher) - both are suspicious."),(0,i.kt)("li",{parentName:"ul"},"Most variants have few mapping quality zero reads - but some have up to around 10% or higher.  This is suspicious too."),(0,i.kt)("li",{parentName:"ul"},"All the statistical tests have a big spike near zero - that is, evidence for biases.  Suspicious!"),(0,i.kt)("li",{parentName:"ul"},"The allele count varies quite a bit - most called variants are rare but for a few variants, the alternate allele is common.  (This is not really suspicious.)"),(0,i.kt)("li",{parentName:"ul"},"Lastly the QUAL metric varies a lot too, with many variants having quite low QUAL scores.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note.")," As described in lectures, the QUAL metric is a PHRED-scaled estimate of the probability the site is not a true variant.  It is:"),(0,i.kt)("div",{className:"math math-display"},(0,i.kt)("span",{parentName:"div",className:"katex-display"},(0,i.kt)("span",{parentName:"span",className:"katex"},(0,i.kt)("span",{parentName:"span",className:"katex-mathml"},(0,i.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,i.kt)("semantics",{parentName:"math"},(0,i.kt)("mrow",{parentName:"semantics"},(0,i.kt)("mo",{parentName:"mrow"},"\u2212"),(0,i.kt)("mn",{parentName:"mrow"},"10"),(0,i.kt)("mo",{parentName:"mrow"},"\u2217"),(0,i.kt)("mi",{parentName:"mrow"},"l"),(0,i.kt)("mi",{parentName:"mrow"},"o"),(0,i.kt)("msub",{parentName:"mrow"},(0,i.kt)("mi",{parentName:"msub"},"g"),(0,i.kt)("mn",{parentName:"msub"},"10")),(0,i.kt)("mrow",{parentName:"mrow"},(0,i.kt)("mo",{parentName:"mrow",fence:"true"},"("),(0,i.kt)("mi",{parentName:"mrow"},"P"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,i.kt)("mtext",{parentName:"mrow"},"site\xa0is\xa0not\xa0a\xa0true\xa0variant\xa0with\xa0these\xa0alleles"),(0,i.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),(0,i.kt)("mtext",{parentName:"mrow"},"reads"),(0,i.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,i.kt)("mo",{parentName:"mrow",fence:"true"},")"))),(0,i.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"-10 * log_{10} \\left( P( \\text{site is not a true variant with these alleles}|\\text{reads})\\right)")))),(0,i.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7278em",verticalAlign:"-0.0833em"}}),(0,i.kt)("span",{parentName:"span",className:"mord"},"\u2212"),(0,i.kt)("span",{parentName:"span",className:"mord"},"10"),(0,i.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,i.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,i.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,i.kt)("span",{parentName:"span",className:"base"},(0,i.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.01968em"}},"l"),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal"},"o"),(0,i.kt)("span",{parentName:"span",className:"mord"},(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"g"),(0,i.kt)("span",{parentName:"span",className:"msupsub"},(0,i.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,i.kt)("span",{parentName:"span",className:"vlist-r"},(0,i.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.3011em"}},(0,i.kt)("span",{parentName:"span",style:{top:"-2.55em",marginLeft:"-0.0359em",marginRight:"0.05em"}},(0,i.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,i.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,i.kt)("span",{parentName:"span",className:"mord mtight"},(0,i.kt)("span",{parentName:"span",className:"mord mtight"},"10"))))),(0,i.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,i.kt)("span",{parentName:"span",className:"vlist-r"},(0,i.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},(0,i.kt)("span",{parentName:"span"})))))),(0,i.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,i.kt)("span",{parentName:"span",className:"minner"},(0,i.kt)("span",{parentName:"span",className:"mopen delimcenter",style:{top:"0em"}},"("),(0,i.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"P"),(0,i.kt)("span",{parentName:"span",className:"mopen"},"("),(0,i.kt)("span",{parentName:"span",className:"mord text"},(0,i.kt)("span",{parentName:"span",className:"mord"},"site\xa0is\xa0not\xa0a\xa0true\xa0variant\xa0with\xa0these\xa0alleles")),(0,i.kt)("span",{parentName:"span",className:"mord"},"\u2223"),(0,i.kt)("span",{parentName:"span",className:"mord text"},(0,i.kt)("span",{parentName:"span",className:"mord"},"reads")),(0,i.kt)("span",{parentName:"span",className:"mclose"},")"),(0,i.kt)("span",{parentName:"span",className:"mclose delimcenter",style:{top:"0em"}},")"))))))),(0,i.kt)("p",null,"So a value of zero corresponds to complete certainty that the site is not a variant, a value of 10\ncorresponds to about 10% chance the site is not a variant, and so on. "),(0,i.kt)("h3",{id:"filtering-variants"},"Filtering variants"),(0,i.kt)("p",null,"We will use a simple ad-hoc approach to filter variants: we'll pick some thresholds based on the above plot.\nHere's a python way to do that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"thresholds = {\n    'dp': ('>=', 1000),  # Assume at least 1000x read depth across our 164 samples\n    'mq': ('>=', 40),    # Average mapping quality at least 40\n    'mq0f': ('<=', 0.1), # Assume < 10% reads are mapping quality 0\n    'ac': ('>=', None),  # Assume we have seen in at least 2 samples.\n    'an': ('>=', 300),   # At least 90% of genotypes called\n    'qual': ('>=', 50),  # Assume QUAL>50, i.e. 1 in 100,000 chance it's not a variant.\n    'rpb': ('>=', 0),    # Mann-Whitney U test of Read Position Bias,\n    'mqb': ('>=', 0),    # Mann-Whitney U test of Mapping Quality Bias,\n    'bqb': ('>=', 0),    # Mann-Whitney U test of Base Quality Bias,\n    'mqsb': ('>=', 0),   # Mann-Whitney U test of Mapping Quality vs Strand Bias\n    'sgb': ('', None),   # Segregation based metric - ignore for now\n}\n")),(0,i.kt)("p",null,"We'll add condition failure status as columns in the ",(0,i.kt)("inlineCode",{parentName:"p"},"info")," data frame."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"for field, (comparison, threshold) in thresholds.items():\n    column_name = 'pass_%s' % field\n    if threshold is not None:\n        if comparison == '>=':\n            info[ column_name ] = (info[field] >= threshold)\n        elif comparison == '<=':\n            info[ column_name ] = (info[field] <= threshold)\n\nprint(info)\n")),(0,i.kt)("h3",{id:"how-did-filtering-perform"},"How did filtering perform?"),(0,i.kt)("p",null,"A useful way to see what those filters did is to create an ",(0,i.kt)("em",{parentName:"p"},"upset plot"),". This will let us see how\nmany variants each filter excluded, and how they link together.  For that we need another library:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"from upsetplot import UpSet, from_indicators\n")),(0,i.kt)("p",null,"Let's also capture just the filtering columns from our dataframe and plot:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"filter_columns = [c for c in info.columns if 'pass_' in c]\nfilter = info[ filter_columns ]\n\nupset_format = from_indicators( filter.columns, filter )\nUpSet( upset_format, min_subset_size=20, sort_by='cardinality', show_counts=True )\n")),(0,i.kt)("p",null,"You should see something like this:\n",(0,i.kt)("img",{alt:"img",src:a(7168).Z,width:"798",height:"812"})),(0,i.kt)("p",null,"What's plotted here are as follows. Look at the lower panel first. For each filter metric, there's\none row, and the bar on the left shows the number of variants that pass that metric. The blobs then\nindicates all the different combinations of filters that passed together. Finally, the top plot\nshows the number of variants passing each of these combinations."),(0,i.kt)("p",null,"For example, in the plot above, 11,709 pass all filters; the qual filter filters out 313 variants\nthat are not filtered out by any other metrics, but also 168 variants filtered by various P-value\nmetrics, and so on."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Question.")," What happens if you change the ",(0,i.kt)("inlineCode",{parentName:"p"},"min_subset_size")," in the above?"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Question.")," Try changing thresholds in the ",(0,i.kt)("inlineCode",{parentName:"p"},"thresholds")," dict to see how that changes the result.\nIn particular it might make sense to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"filter on the various P-values (",(0,i.kt)("inlineCode",{parentName:"p"},"rpb"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"mqb"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"bqb")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"mqsb"),"). Values in the range 0.00001 -\n0.001 might be appropriate.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"We might want to insist that the variant is seen in at least two samples. This could be done by\nassuming ",(0,i.kt)("inlineCode",{parentName:"p"},"AC>1"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Maybe 10% is too many reads with mapping quality zero - we might want a more aggressive filter here."))),(0,i.kt)("p",null,"Reach a set of filters that you think are ",(0,i.kt)("strong",{parentName:"p"},"defensible"),". You should expect to filter out the worst-performing\nvariants, but still retain most variants in the data."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note.")," To avoid artifacts, it actually makes sense to filter out variants where the coverage is\ntoo high (as well as too low). In this data, the coverage is around 30x and there are 164 samples,\nso generally we expect around 5000x coverage. Sites with (say) twice that coverage are probably\nartifacts due to misalignment of reads to repetitive sequence.  "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Challenge coding question")," for python experts only! Update the above code to allow filtering on both\nlow and high coverage.  (Otherwise you can add this by hand in the ",(0,i.kt)("inlineCode",{parentName:"p"},"bcftools")," command below.)"),(0,i.kt)("h3",{id:"setting-the-filters-in-stone"},"Setting the filters in stone."),(0,i.kt)("p",null,"We will now use the ",(0,i.kt)("inlineCode",{parentName:"p"},"bcftools filter")," command to actually filter out the variants. First let's turn\nour chosen thresholds into an appropriate string.  The string we need is:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"bcftools_filters = [\n '%s%s%f' % ( field.upper(), comparison, threshold )\n for field, ( comparison, threshold ) in thresholds.items()\n if threshold is not None\n]\n\nprint( ' & '.join( bcftools_filters ))\n")),(0,i.kt)("p",null,"It should look something like this (depending on your filters):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"DP>=1000 & DP<=10000 & MQ>=40 & MQ0F<=0.05 & AN>=300 & AC>=2 && QUAL>=50 & RPB>=0.0001 & MQB>=0.0001 & BQB>=0.0001 & MQSB>=0.0001\n")),(0,i.kt)("p",null,"Copy that string and head back to your terminal window.  We will now filter the variants:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"bcftools filter -Oz \\\n-i '[PUT YOUR FILTER STRING HERE]' \\\n-o 'GWD_30x_calls.filtered.vcf.gz' \\\ncalls/GWD_30x_calls.vcf.gz\n")),(0,i.kt)("p",null,"for example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"bcftools filter -Oz \\\n-i 'DP>=1000 & DP<=10000 & MQ>=40 & MQ0F<=0.05 & AN>=300 & AC>=2 && QUAL>=50 & RPB>=0.0001 & MQB>=0.0001 & BQB>=0.0001 & MQSB>=0.0001' \\\n-o 'GWD_30x_calls.filtered.vcf.gz' \\\ncalls/GWD_30x_calls.vcf.gz\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note.")," The backslashes (",(0,i.kt)("inlineCode",{parentName:"p"},"\\"),") are ",(0,i.kt)("em",{parentName:"p"},"line continuation characters"),".  The above is all one command."),(0,i.kt)("p",null,"Finally count the variants in the original and filtered file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"bcftools view -H calls/GWD_30x_calls.vcf.gz | wc -l\nbcftools view -H GWD_30x_calls.filtered.vcf.gz | wc -l\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Question")," Does this match your upset plot?  How many variants are filtered out?"),(0,i.kt)("h3",{id:"variant-calling---challenge-questions"},"Variant calling - challenge questions"),(0,i.kt)("p",null,"Here are two questions that will help you to understand ",(0,i.kt)("em",{parentName:"p"},"why")," variants fail the filters."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Question 1"),". (We actually recommend skipping this one today!) Pick a variant that fails one of\nthe filters. Find a sample or samples that was called with the alternate allele and use ",(0,i.kt)("inlineCode",{parentName:"p"},"samtools\ntview")," to inspect the pileup. Is it clear why the variant failed the filter?"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note.")," To use the supplied BAM files you will have to take variants in the range\n",(0,i.kt)("inlineCode",{parentName:"p"},"chr19:48693971-48707951"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Question 2"),". In the lectures we learned that the ratio of transitions to transversions (Ts/Tv)\ncan be used to assess the quality of a set of variant calls. (Transitions are interchanges of\ntwo-ring purines (A<->G) or one-ring pyramidines (C<->T). Transversions are mutations which change\nbetween purines and pyramidines. See\n",(0,i.kt)("a",{parentName:"p",href:"https://www.mun.ca/biology/scarr/Transitions_vs_Transversions.html"},"this page")," for more details). Ts/Tv\nis should generally be around 2 or higher in a robust set of variant calls. ",(0,i.kt)("strong",{parentName:"p"},"What is the Ts/Tv for\nthis data before and after filtering?")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Note.")," You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"bcftools stats")," command to calculate Ts/Tv statistics. (They appear as\n",(0,i.kt)("inlineCode",{parentName:"p"},"TSTV")," in the output.)"),(0,i.kt)("h3",{id:"next-steps"},"Next steps"),(0,i.kt)("p",null,"Congrulations! You have now carried out some basic variant quality QC. Go back to ",(0,i.kt)("a",{parentName:"p",href:"/whg-training-resources/sequence_data_analysis/variant_calling_and_imputation/"},"the\npractical")," and move on to phasing."))}h.isMDXComponent=!0},7168:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/New_upset_plot-67761610c03f9072f882ad7b51e33325.png"}}]);
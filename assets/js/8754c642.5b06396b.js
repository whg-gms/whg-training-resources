"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[8054],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),h=u(n),m=i,d=h["".concat(l,".").concat(m)]||h[m]||p[m]||s;return n?a.createElement(d,o(o({ref:t},c),{},{components:n})):a.createElement(d,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[h]="string"==typeof e?e:i,o[1]=r;for(var u=2;u<s;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1709:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const s={},o="Getting started with snakemake",r={unversionedId:"sequence_data_analysis/Getting started with snakemake/README",id:"sequence_data_analysis/Getting started with snakemake/README",title:"Getting started with snakemake",description:"This is a quick snakemake example that uses bwa mem to align a few reads.",source:"@site/docs/sequence_data_analysis/Getting started with snakemake/README.md",sourceDirName:"sequence_data_analysis/Getting started with snakemake",slug:"/sequence_data_analysis/Getting started with snakemake/",permalink:"/whg-training-resources/sequence_data_analysis/Getting started with snakemake/",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/sequence_data_analysis/Getting started with snakemake/README.md",tags:[],version:"current",frontMatter:{}},l={},u=[{value:"Basic alignment example",id:"basic-alignment-example",level:2},{value:"Using a configuration file",id:"using-a-configuration-file",level:2},{value:"Running it on the cluster",id:"running-it-on-the-cluster",level:2},{value:"Other stuff",id:"other-stuff",level:2}],c={toc:u},h="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(h,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started-with-snakemake"},"Getting started with snakemake"),(0,i.kt)("p",null,"This is a quick snakemake example that uses ",(0,i.kt)("inlineCode",{parentName:"p"},"bwa mem")," to align a few reads.\nThe dataset is tiny so you can safely run it e.g. on a laptop - very likely\nalso safe to run on the login nodes of your cluster."),(0,i.kt)("h2",{id:"basic-alignment-example"},"Basic alignment example"),(0,i.kt)("p",null,"I'm assuming you have snakemake installed already."),(0,i.kt)("p",null,"To run the pipeline, do this: first, use the -n option to see what will be run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"snakemake -s align1.snakefile -n\n")),(0,i.kt)("p",null,'If you look in align1.snakefile, you will see there are two rules.  The first one ("all")\nis just a "here is what the main targets are" rule - it doesn\'t do anything but just tells\nsnakemake that it should try to figure out how to make the sam files.  Then snakemake realises\nthe "align" rule can make the sam files, so uses that to align the reads.'),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"To properly run the pipeline, just in your session on the head node (i.e. without sending\nto the cluster), run ")),(0,i.kt)("p",null,"$ snakemake -s pipelines/alignment_test/align.snakefile --cores 1"),(0,i.kt)("p",null,"With any luck it will run and output two sam files in results/alignment_test/"),(0,i.kt)("h2",{id:"using-a-configuration-file"},"Using a configuration file"),(0,i.kt)("ol",{start:4},(0,i.kt)("li",{parentName:"ol"},"This pipeline is a bit too simple - what if we want to add samples?  Or align to a different\nreference?  Or something else?")),(0,i.kt)("p",null,"A nice way to make it flexible is to collect  informatio about input data into a separate\nconfiguration file.  I've set that up in a second snakemake file and config file.  Try it\nlike this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\\$ snakemake -s pipelines/alignment_test/align_with_cofig.snakefile --cores 1 --configfile pipelines/alignment_test/config.json\n")),(0,i.kt)("p",null,"This should output two new sam files in the results folder, now named for the sample and\nthe assembly that is used to align to.  You can easily add new samples or assemblies by\nediting the config file (or keep multiple config files for different parts of the analysis)."),(0,i.kt)("h2",{id:"running-it-on-the-cluster"},"Running it on the cluster"),(0,i.kt)("ol",{start:5},(0,i.kt)("li",{parentName:"ol"},"The above commands were run on the head node but For real work you have to submit jobs to\nthe cluster... this is a bit trickier.  You have to tell snakemake the qsub command line.\nSo you do something like:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ snakemake -s pipelines/alignment_test/align.snakefile --cluster "qsub -q short.qc" --jobs 100 --jobname align.{jobid}\n')),(0,i.kt)("p",null,"(When that gets annoying, you can collect your qsub command in another configuration file, as described here:\n",(0,i.kt)("a",{parentName:"p",href:"https://snakemake.readthedocs.io/en/stable/executing/cluster.html"},"https://snakemake.readthedocs.io/en/stable/executing/cluster.html"),".  Or you can put this in a shell script.)"),(0,i.kt)("p",null,"The above sends off all those jobs to the cluster and keeps track of them for you. You might\nneed to fiddle with the qsub command depending on how you are setup.  Once it's going you can run "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ qstat\n")),(0,i.kt)("p",null,"to see what you have running / waiting (hopefully all the jobs are called align.","<","something",">"," because\nof the --jobname argument above)."),(0,i.kt)("ol",{start:6},(0,i.kt)("li",{parentName:"ol"},"The only problem with submitting to the cluster is that the main snakemake process now sits and waits\nfor them all to finish.  That means you can't log off while the pipeline is running.\nThere are a couple of solutions to this - the one I use is by running it in GNU screen:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'$ screen -S align snakemake -s align.snakefile --cluster "qsub -q short.qc" --jobs 100 --jobname align.{jobid}\n')),(0,i.kt)("p",null,"Using screen is like running a new terminal window that just stays there even after you log out.\nIt is controlled with funny key combinations... to get out of the screen and back to your\noriginal terminal, you have to press Ctrl-A D.  Now (back in the original terminal) do:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ screen -list\n")),(0,i.kt)("p",null,"This should show you a list of screens you have running (i.e. just one).  And"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ screen -r align\n")),(0,i.kt)("p",null,"will take you back into it. (Ctrl-D or typing exit will properly quit the terminal)."),(0,i.kt)("p",null,"The nice thing about this is that the screens stay running even if you log off... so you can run the pipeline\nand come back to it the next day to see how it got on."),(0,i.kt)("p",null,"Alternative: there's a very similar (probably better) thing called tmux - see ",(0,i.kt)("a",{parentName:"p",href:"https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/"},"https://www.hamvocke.com/blog/a-quick-and-easy-guide-to-tmux/"),"\nI haven't used tmux but it seems to have a coloured thing so must be better."),(0,i.kt)("h2",{id:"other-stuff"},"Other stuff"),(0,i.kt)("p",null,"A further thing you can do is set up snakemake to use conda.\nI'm not expert on this but David Flores is so you could ask him to help set it up.\nThe advantage is a. no need to hardcode paths to executables b. make sure and get the right executable version\nand c. reproducibility.  Examples in the /well/longread/shared/illumina_vs_coolmps_paper/ folder."),(0,i.kt)("p",null,"Enjoy!\ngb."))}p.isMDXComponent=!0}}]);
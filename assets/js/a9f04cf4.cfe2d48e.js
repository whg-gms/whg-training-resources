"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[8725],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),g=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=g(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=g(t),d=a,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(h,i(i({ref:n},p),{},{components:t})):r.createElement(h,i({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var g=2;g<o;g++)i[g]=t[g];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2360:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(7294),a=t(6010);const o={tabItem:"tabItem_OmH5"};function i(e){let{children:n,hidden:t,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,i),hidden:t},n)}},9877:(e,n,t)=>{t.d(n,{Z:()=>u});var r=t(7462),a=t(7294),o=t(2389),i=t(7392),s=t(7094),l=t(2466),g=t(6010);const p={tabList:"tabList_uSqn",tabItem:"tabItem_LplD"};function m(e){const{lazy:n,block:t,defaultValue:o,values:m,groupId:u,className:d}=e,h=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),c=m??h.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),v=(0,i.l)(c,((e,n)=>e.value===n.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===o?o:o??h.find((e=>e.props.default))?.props.value??h[0]?.props.value;if(null!==k&&!c.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${c.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:w}=(0,s.U)(),[_,b]=(0,a.useState)(k),N=[],{blockElementScrollPositionUntilNextRender:y}=(0,l.o5)();if(null!=u){const e=f[u];null!=e&&e!==_&&c.some((n=>n.value===e))&&b(e)}const T=e=>{const n=e.currentTarget,t=N.indexOf(n),r=c[t].value;r!==_&&(y(n),b(r),null!=u&&w(u,r))},x=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;n=N[t]||N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;n=N[t]||N[N.length-1];break}}n?.focus()};return a.createElement("div",{className:(0,g.Z)("tabs-container",p.tabList)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,g.Z)("tabs",{"tabs--block":t},d)},c.map((e=>{let{value:n,label:t,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:_===n?0:-1,"aria-selected":_===n,key:n,ref:e=>N.push(e),onKeyDown:x,onFocus:T,onClick:T},o,{className:(0,g.Z)("tabs__item",p.tabItem,o?.className,{"tabs__item--active":_===n})}),t??n)}))),n?(0,a.cloneElement)(h.filter((e=>e.props.value===_))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},h.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==_})))))}function u(e){const n=(0,o.Z)();return a.createElement(m,(0,r.Z)({key:String(n)},e))}},7222:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>g,toc:()=>m});var r=t(7462),a=(t(7294),t(3905)),o=t(9877),i=t(2360);const s={sidebar_position:2},l="An algorithm to merge regions",g={unversionedId:"programming/analysing_genes_across_species/how_much_in_genes/an_algorithm_to_merge_regions",id:"programming/analysing_genes_across_species/how_much_in_genes/an_algorithm_to_merge_regions",title:"An algorithm to merge regions",description:"What was wrong?",source:"@site/docs/programming/analysing_genes_across_species/how_much_in_genes/002_an_algorithm_to_merge_regions.md",sourceDirName:"programming/analysing_genes_across_species/how_much_in_genes",slug:"/programming/analysing_genes_across_species/how_much_in_genes/an_algorithm_to_merge_regions",permalink:"/whg-training-resources/programming/analysing_genes_across_species/how_much_in_genes/an_algorithm_to_merge_regions",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/analysing_genes_across_species/how_much_in_genes/002_an_algorithm_to_merge_regions.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar5",previous:{title:"A naive approach",permalink:"/whg-training-resources/programming/analysing_genes_across_species/how_much_in_genes/naive_approach"},next:{title:"How much of the genome is *really* in genes?",permalink:"/whg-training-resources/programming/analysing_genes_across_species/how_much_in_genes/how_much_II"}},p={},m=[{value:"What was wrong?",id:"what-was-wrong",level:2},{value:"The algorithm",id:"the-algorithm",level:2},{value:"Implementing the algorithm",id:"implementing-the-algorithm",level:2},{value:"Start with a test",id:"start-with-a-test",level:3},{value:"Sort",id:"sort",level:3},{value:"initialise",id:"initialise",level:3},{value:"Stepping through regions",id:"stepping-through-regions",level:3},{value:"Checking for overlap",id:"checking-for-overlap",level:3},{value:"Putting it together",id:"putting-it-together",level:3},{value:"Testing it",id:"testing-it",level:3}],u={toc:m},d="wrapper";function h(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"an-algorithm-to-merge-regions"},"An algorithm to merge regions"),(0,a.kt)("h2",{id:"what-was-wrong"},"What was wrong?"),(0,a.kt)("p",null,"The reason our 'proportion of genome in genes estimate' is wrong, is that ",(0,a.kt)("strong",{parentName:"p"},"genes overlap each other"),".    For example\n",(0,a.kt)("a",{parentName:"p",href:"https://genome-euro.ucsc.edu/cgi-bin/hgTracks?db=hg38&position=chr10%3A66926269%2D66926385"},"here is the smallest annotated\ngene"),", inside an exon of the\nlarger gene ",(0,a.kt)("em",{parentName:"p"},"LRRTM3")," - and you can also see that ",(0,a.kt)("em",{parentName:"p"},"LRRTM3")," clearly overlaps ",(0,a.kt)("em",{parentName:"p"},"CTNNA3")," there.  "),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Question")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Can you find more example by interrogating your data?  For example, maybe some other genes overlap the giant gene ",(0,a.kt)("em",{parentName:"p"},"TTN"),"\n(titin)?"))),(0,a.kt)("p",null,"What this means is we have ",(0,a.kt)("strong",{parentName:"p"},"over-counted the length"),"."),(0,a.kt)("p",null,"To fix this we will have to develop an algorithm to ",(0,a.kt)("em",{parentName:"p"},"merge")," the gene regions, so that we can compute the total length\nwithout overlaps.  This page will show you how you can do that."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Challenge")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Write a function ",(0,a.kt)("inlineCode",{parentName:"p"},"merge_regions()")," that computes the union of (i.e. merges) a set of regions passed in."),(0,a.kt)("p",{parentName:"div"},"The input should be a dataframe with ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," columns indicating the input regions.  They might overlap."),(0,a.kt)("p",{parentName:"div"},"The output should be a dataframe with ",(0,a.kt)("inlineCode",{parentName:"p"},"start")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," columns indicating the merged regions.  They should cover the\nsame intervals but without overlaps."),(0,a.kt)("p",{parentName:"div"},"For example if we give it this:"),(0,a.kt)("pre",{parentName:"div"},(0,a.kt)("code",{parentName:"pre",className:"language-r"},"test_regions = tribble(\n   ~start,  ~end,\n         50,   100,   # A long region\n         90,   120,   # A region overlapping the end of the first one\n         60,    80,   # A region enclosed in the first one\n         200,  220,   # A region not overlapping the earlier ones\n         205,  215,   # A region enclosed in the previous one\n         150,  190    # A region not overlapping any others, and out of order\n)\n")),(0,a.kt)("p",{parentName:"div"},"It should compute this:"),(0,a.kt)("pre",{parentName:"div"},(0,a.kt)("code",{parentName:"pre",className:"language-r"},"> merge_regions( test_regions )\n# A tibble: 3 \xd7 2\n  start   end\n  <dbl> <dbl>\n1    50   120\n2   150   190\n3   200   220\n")),(0,a.kt)("p",{parentName:"div"},"(If you stare hard at the test regions above you'll see this is the right answer.)"))),(0,a.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Note how in the above we used the dplyr ",(0,a.kt)("a",{parentName:"p",href:"https://tibble.tidyverse.org/reference/tribble.html"},(0,a.kt)("inlineCode",{parentName:"a"},"tribble()")," function"),".  It\nprovides a useful way to specify test dataframes by row instead of column."))),(0,a.kt)("h2",{id:"the-algorithm"},"The algorithm"),(0,a.kt)("p",null,"A basic idea for an algorithm to solve this is to 'walk' through the regions from one end of the chromosome to the\nother, keeping track of the current merged region. At each step we will then either ",(0,a.kt)("strong",{parentName:"p"},"extend")," the current merged region\nif the next region overlaps), or else ",(0,a.kt)("strong",{parentName:"p"},"store")," the current merged region in the output and move on to the next."),(0,a.kt)("p",null,"For example, here is a diagram of that algorithm in action for a dataset like our test regions above.  You can click\nthrough the tabs to see the algorithm steps:"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"0",label:"Input regions",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"              region 1:      ----------------\n              region 2:                    -------\n              region 3:            ----\n              region 4:                                          ------\n              region 5:                                        ------\n              region 6:                              -----\n"))),(0,a.kt)(i.Z,{value:"1",label:"Sort",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"              region 1:      ----------------\n              region 3:            ----\n              region 2:                    -------\n              region 6:                              -----\n              region 5:                                        ------\n              region 4:                                          ------\n"))),(0,a.kt)(i.Z,{value:"2",label:"Initialise",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"            \u2192 region 1:      ----------------\n              region 3:            ----\n              region 2:                    -------\n              region 6:                              -----\n              region 5:                                        ------\n              region 4:                                          ------\n merged region, step 1:      \u2191              \u2191\n"))),(0,a.kt)(i.Z,{value:"3",label:"Step 3",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"              region 1:      ----------------\n            \u2192 region 3:            ----\n              region 2:                    -------\n              region 6:                              -----\n              region 5:                                        ------\n              region 4:                                          ------\n merged region, step 1:      \u2191              \u2191\n merged region, step 2:      \u2191              \u2191                              \u2190 (no change)\n"))),(0,a.kt)(i.Z,{value:"4",label:"Extend",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"              region 1:      ----------------\n              region 3:            ----\n            \u2192 region 2:                    -------\n              region 6:                              -----\n              region 5:                                        ------\n              region 4:                                          ------\n merged region, step 1:      \u2191              \u2191\n merged region, step 2:      \u2191              \u2191                              \u2190 (no change)\n merged region, step 3:      \u2191                   \u2191                         \u2190 (extend)\n"))),(0,a.kt)(i.Z,{value:"5",label:"Step 5",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"              region 1:      ----------------\n              region 3:            ----\n              region 2:                    -------\n            \u2192 region 6:                              -----\n              region 5:                                        ------\n              region 4:                                          ------\n merged region, step 1:      \u2191              \u2191\n merged region, step 2:      \u2191              \u2191                              \u2190 (no change)\n output region, step 3:      \u2191-------------------\u2191                         \u2190 (output...)\n merged region, step 4:                              \u2191   \u2191                 \u2190 (...and start new interval)\n"))),(0,a.kt)(i.Z,{value:"6",label:"Steps 6",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"              region 1:      ----------------\n              region 3:            ----\n              region 2:                    -------\n              region 6:                              -----\n            \u2192 region 5:                                        ------\n              region 4:                                          ------\n merged region, step 1:      \u2191              \u2191\n merged region, step 2:      \u2191              \u2191                              \u2190 (no change)\n output region, step 3:      \u2191-------------------\u2191                         \u2190 (output)\n output region, step 4:                              \u2191---\u2191                 \u2190 (output)\n merged region, step 5:                                        \u2191    \u2191      \u2190 (start new interval)\n"))),(0,a.kt)(i.Z,{value:"7",label:"Steps 7",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"              region 1:      ----------------\n              region 3:            ----\n              region 2:                    -------\n              region 6:                              -----\n              region 5:                                        ------\n            \u2192 region 4:                                          ------\n merged region, step 1:      \u2191              \u2191\n merged region, step 2:      \u2191              \u2191                              \u2190 (no change)\n output region, step 3:      \u2191-------------------\u2191                         \u2190 (output)\n output region, step 4:                              \u2191---\u2191                 \u2190 (output)\n merged region, step 5:                                        \u2191    \u2191      \u2190 (start new interval)\n merged region, step 6:                                        \u2191      \u2191    \u2190 (extend)\n"))),(0,a.kt)(i.Z,{value:"8",label:"Final step",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"              region 1:      ----------------\n              region 3:            ----\n              region 2:                    -------\n              region 6:                              -----\n              region 5:                                        ------\n              region 4:                                          ------\n merged region, step 1:      \u2191              \u2191\n merged region, step 2:      \u2191              \u2191                              \u2190 (no change)\n output region, step 3:      \u2191-------------------\u2191                         \u2190 (output)\n output region, step 4:                              \u2191---\u2191                 \u2190 (output)\n merged region, step 5:                                        \u2191    \u2191      \u2190 (start new interval)\n output region, step 6:                                        \u2191------\u2191    \u2190 (output this too!)\n\n(end of algorithm).\n")))),(0,a.kt)("p",null,"At this point we have output a set of three merged intervals that cover the same regions as the input ones, but without\noverlap."),(0,a.kt)("p",null,"Can you implement it?"),(0,a.kt)("h2",{id:"implementing-the-algorithm"},"Implementing the algorithm"),(0,a.kt)("p",null,"If you're stuck - don't worry, this page will guide you to a solution.  "),(0,a.kt)("h3",{id:"start-with-a-test"},"Start with a test"),(0,a.kt)("p",null,"We should of course start with a test - that'll help us to know when we have got it right.    Here is one that tests\nsimple examples and more complicated ones:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},"test_merge_regions <- function() {\n   # Test on a single region\n   {\n      merged = merge_regions(\n         tibble(\n            start = 1,\n            end = 1\n         )\n      )\n      stopifnot( nrow( merged ) == 1 )\n      stopifnot( merged$start[1] == 1 )\n      stopifnot( merged$end[1] == 1 )\n   }\n\n   # Test on non-overlapping regions\n   {\n      merged = merge_regions(\n         tribble(\n            ~start, ~end,\n                 1,   10,\n                21,   30\n         )\n      )\n      stopifnot( nrow( merged ) == 2 )\n      stopifnot( merged$start[1] == 1 )\n      stopifnot( merged$end[1] == 10 )\n      stopifnot( merged$start[2] == 21 )\n      stopifnot( merged$end[2] == 30 )\n   }\n\n   # Test on overlapping regions\n   {\n      merged = merge_regions(\n         tribble(\n            ~start, ~end,\n                 1,   10,\n                 6,   15\n         )\n      )\n      stopifnot( nrow( merged ) == 1 )\n      stopifnot( merged$start[1] == 1 )\n      stopifnot( merged$end[1] == 15 )\n   }\n\n   # Test using our complicated example above\n   {\n      merged = merge_regions(\n          tribble(\n              ~start,  ~end,\n                  50,   100,   # A long region\n                  90,   120,   # A region overlapping the end of the first one\n                  60,    80,   # A region enclosed in the first one\n                  200,  220,   # A region not overlapping the earlier ones\n                  205,  215,   # A region enclosed in the previous one\n                  150,  190    # A region not overlapping any others, and out of order\n          )\n      )\n      stopifnot( nrow( merged ) == 3 )\n      stopifnot( merged$start[1] == 50 )\n      stopifnot( merged$end[1] == 120 )\n      stopifnot( merged$start[2] == 150 )\n      stopifnot( merged$end[2] == 190 )\n      stopifnot( merged$start[3] == 200 )\n      stopifnot( merged$end[3] == 220 )\n   }\n}\n")),(0,a.kt)("p",null,"If you run the test right now, it will of course fail:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},'> test_merge_regions()\nError in merge_regions(tibble(start = 1, end = 1)) : \n  could not find function "merge_regions"\n')),(0,a.kt)("p",null,"Once the test passes, your `merge_regions() function is ready!"),(0,a.kt)("h3",{id:"sort"},"Sort"),(0,a.kt)("p",null,"We should start the by sorting the regions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},"input_regions = input_regions %>% arrange( start, end )\n")),(0,a.kt)("h3",{id:"initialise"},"initialise"),(0,a.kt)("p",null,"We'll initialise the algorithm by starting with the first (sorted) region passed in.\nLet's also create a variable ",(0,a.kt)("inlineCode",{parentName:"p"},"result")," to keep track of the output regions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},"result = tibble()\ncurrent_merged_region = input_regions[1,]\n")),(0,a.kt)("h3",{id:"stepping-through-regions"},"Stepping through regions"),(0,a.kt)("p",null,"How should we 'walk' through the remaining regions?  The obvious way is a loop:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},"for( 2 in 1:nrow(input_regions)) {\n   next_region = input_regions[i,]\n\n   # do something here!\n}\n")),(0,a.kt)("h3",{id:"checking-for-overlap"},"Checking for overlap"),(0,a.kt)("p",null,"So what should go in the loop?  Evidently what should happen is:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("inlineCode",{parentName:"li"},"next_region")," ",(0,a.kt)("em",{parentName:"li"},"overlaps")," the current region we are merging, then the current region isn't big enough - we'd better extend it"),(0,a.kt)("li",{parentName:"ul"},"Otherwise, we'd better record the current region we've been merging, and start a new 'current' region.")),(0,a.kt)("p",null,"So something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},"for( i in 2:nrow(input_regions)) {\n   next_region = input_regions[i,]\n\n   overlapping = (next_region$start <= current_merged_region$end)\n   if( overlapping ) {\n      # Extend the current region\n   } else {\n      # Store the current region\n      # and start a new one\n   }\n}\n")),(0,a.kt)("p",null,"What goes in the ",(0,a.kt)("inlineCode",{parentName:"p"},"if()")," statement?  Well, extending the region is easy - we make the current merged region at least as\nlarge as it is now, plus the new overlapping region:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},"# Extend the current region\ncurrent_merged_region$end = max( current_merged_region$end, next_region$end )\n")),(0,a.kt)("p",null,"Or, if we're not overlapping, then storing the current one in the output is also easy:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},"# Store the current region\nresult = rbind( result, current_merged_region )\n# and start a new one\ncurrent_merged_region = next_region\n")),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},(0,a.kt)("inlineCode",{parentName:"p"},"rbind()")," here stands for 'bind rows'.  That is R-speak for 'concatenate rows', i.e. here used to add this new row to\nthe existing dataframe.  (You can also use dplyr ",(0,a.kt)("a",{parentName:"p",href:"https://dplyr.tidyverse.org/reference/bind.html"},(0,a.kt)("inlineCode",{parentName:"a"},"bind_rows()"))," if you\nprefer the name).  This is quite a common / usefulpattern to build up a result dataframe within a loop."))),(0,a.kt)("h3",{id:"putting-it-together"},"Putting it together"),(0,a.kt)("p",null,"Let's put this all together in a function now:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-r"},"merge_regions = function( input_regions ) {\n   # Sort regions\n   input_regions = input_regions %>% arrange( start, end )\n\n   # Create variables to put the result in\n   result = tibble()\n   current_merged_region = input_regions[1,]\n\n   # Loop over regions\n   for( i in 2:nrow(input_regions)) {\n      next_region = input_regions[i,]\n\n      overlapping = (next_region$start <= current_merged_region$end)\n      if( overlapping ) {\n         current_merged_region$end = max( current_merged_region$end, next_region$end )\n      } else {\n         result = rbind( result, current_merged_region )\n         # Start a new region!\n         current_merged_region = next_region\n      }\n   }\n   return( result )\n}\n")),(0,a.kt)("h3",{id:"testing-it"},"Testing it"),(0,a.kt)("p",null,"So does it work?"),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Try out the test:"),(0,a.kt)("pre",{parentName:"div"},(0,a.kt)("code",{parentName:"pre",className:"language-r"},"> test_merge_regions()\nError in if (overlapping) { : missing value where TRUE/FALSE needed\n\nUh-oh!\n\nYou can also try it on our test dataset:\n```r\nmerge_regions( test_regions )\n")),(0,a.kt)("p",{parentName:"div"},"This is wrong as well!  (Two output regions instead of three.)"),(0,a.kt)("p",{parentName:"div"},"There are actually two problems with the current function:"),(0,a.kt)("ul",{parentName:"div"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("strong",{parentName:"p"},"first problem")," occurs if we pass in an input dataframe with only one region (or indeed, an empty dataframe with\nno regions in).  Can you see what the problem is and how to fix it?")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"The ",(0,a.kt)("strong",{parentName:"p"},"second problem")," is that we havent quite finished the algorithm - we didn't implement the ",(0,a.kt)("a",{parentName:"p",href:"#an-algorithm-to-merge-regions"},"last\nstep"),"!  Can you finish it?"))),(0,a.kt)("p",{parentName:"div"},"Use the test to know when you've fixed it - good luck!"))))}h.isMDXComponent=!0}}]);
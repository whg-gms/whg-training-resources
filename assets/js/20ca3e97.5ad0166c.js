"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[7475],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>u});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=i.createContext({}),l=function(e){var n=i.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return i.createElement(m.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,m=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(t),h=a,u=c["".concat(m,".").concat(h)]||c[h]||d[h]||r;return t?i.createElement(u,o(o({ref:n},p),{},{components:t})):i.createElement(u,o({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=h;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<r;l++)o[l]=t[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},7854:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=t(7462),a=(t(7294),t(3905));const r={sidebar_position:5},o="Where are the commands?",s={unversionedId:"bioinformatics/command_line/appendices/where_are_the_commands",id:"bioinformatics/command_line/appendices/where_are_the_commands",title:"Where are the commands?",description:"A 'command' is usually just a program on the filesystem somewhere.  A few commands, however are built-in to the command",source:"@site/docs/bioinformatics/401_command_line/appendices/where_are_the_commands.md",sourceDirName:"bioinformatics/401_command_line/appendices",slug:"/bioinformatics/command_line/appendices/where_are_the_commands",permalink:"/whg-training-resources/bioinformatics/command_line/appendices/where_are_the_commands",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/bioinformatics/401_command_line/appendices/where_are_the_commands.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"sidebar2",previous:{title:"Wildcards and 'globbing'",permalink:"/whg-training-resources/bioinformatics/command_line/appendices/globbing"},next:{title:"Environment variables",permalink:"/whg-training-resources/bioinformatics/command_line/appendices/environment_variables"}},m={},l=[{value:"Finding commands",id:"finding-commands",level:2},{value:"Knowing where to look",id:"knowing-where-to-look",level:2}],p={toc:l},c="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(c,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"where-are-the-commands"},"Where are the commands?"),(0,a.kt)("p",null,"A 'command' is usually just a program on the filesystem somewhere.  A few commands, however are built-in to the command\nline."),(0,a.kt)("h2",{id:"finding-commands"},"Finding commands"),(0,a.kt)("p",null,"To find out where a program is, you can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"which")," command."),(0,a.kt)("p",null,"For example, let's find out where ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"% which ls\n/bin/ls\n")),(0,a.kt)("p",null,"This tells us that ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," is a program in ",(0,a.kt)("inlineCode",{parentName:"p"},"/bin"),".  So typing ",(0,a.kt)("inlineCode",{parentName:"p"},"ls")," is just the same as typing ",(0,a.kt)("inlineCode",{parentName:"p"},"/bin/ls"),"."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Question")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Where do some other programs, like ",(0,a.kt)("inlineCode",{parentName:"p"},"echo"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"cp"),", or ",(0,a.kt)("inlineCode",{parentName:"p"},"hostname"),", live?  Are they all in ",(0,a.kt)("inlineCode",{parentName:"p"},"/bin"),"?"))),(0,a.kt)("h2",{id:"knowing-where-to-look"},"Knowing where to look"),(0,a.kt)("p",null,"So how does the command line know which directories to look in?  The answer is the ",(0,a.kt)("inlineCode",{parentName:"p"},"$PATH")," environment variable.\nTo see what's in this variable right now, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"echo")," to print it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"% echo $PATH\n")),(0,a.kt)("p",null,"(Remember that ",(0,a.kt)("inlineCode",{parentName:"p"},"echo")," just prints out its arguments to stdout.)"),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"As you can see, the directories in ",(0,a.kt)("inlineCode",{parentName:"p"},"$PATH")," are separated by colons.  Can you use ",(0,a.kt)("inlineCode",{parentName:"p"},"tr")," in a pipeline with ",(0,a.kt)("inlineCode",{parentName:"p"},"echo")," as\nabove, to print them out seperated by newlines instead?"),(0,a.kt)("p",{parentName:"div"},(0,a.kt)("strong",{parentName:"p"},"Hint"),": '\\n' is the way\nto write a newline character so ",(0,a.kt)("inlineCode",{parentName:"p"},"tr")," can understand it (but make sure and put the ",(0,a.kt)("inlineCode",{parentName:"p"},"'\\n'")," in single quotes)."))),(0,a.kt)("p",null,"You will probably see that the command line is looking in multiple directories for programs to run - it simply starts at\nthe top and works down the list until it finds a program with the given name.  If it can't find one, it prints a 'command not found' error instead."),(0,a.kt)("p",null,"So if you want to break your terminal, try resetting ",(0,a.kt)("inlineCode",{parentName:"p"},"$PATH"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'% PATH=""\n% ls\ncommand not found: ls\n')),(0,a.kt)("p",null,"Uh-oh!  You'll have to start a new terminal now, or re-set ",(0,a.kt)("inlineCode",{parentName:"p"},"$PATH")," to the right values, to get it back."))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[822],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=p(a),u=r,c=m["".concat(l,".").concat(u)]||m[u]||h[u]||o;return a?n.createElement(c,i(i({ref:t},d),{},{components:a})):n.createElement(c,i({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2360:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),r=a(6010);const o={tabItem:"tabItem_OmH5"};function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:a},t)}},9877:(e,t,a)=>{a.d(t,{Z:()=>h});var n=a(7462),r=a(7294),o=a(2389),i=a(7392),s=a(7094),l=a(2466),p=a(6010);const d={tabList:"tabList_uSqn",tabItem:"tabItem_LplD"};function m(e){const{lazy:t,block:a,defaultValue:o,values:m,groupId:h,className:u}=e,c=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=m??c.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,i.l)(g,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===o?o:o??c.find((e=>e.props.default))?.props.value??c[0]?.props.value;if(null!==k&&!g.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:y}=(0,s.U)(),[N,w]=(0,r.useState)(k),b=[],{blockElementScrollPositionUntilNextRender:_}=(0,l.o5)();if(null!=h){const e=v[h];null!=e&&e!==N&&g.some((t=>t.value===e))&&w(e)}const T=e=>{const t=e.currentTarget,a=b.indexOf(t),n=g[a].value;n!==N&&(_(t),w(n),null!=h&&y(h,n))},I=e=>{let t=null;switch(e.key){case"ArrowRight":{const a=b.indexOf(e.currentTarget)+1;t=b[a]||b[0];break}case"ArrowLeft":{const a=b.indexOf(e.currentTarget)-1;t=b[a]||b[b.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,p.Z)("tabs-container",d.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":a},u)},g.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>b.push(e),onKeyDown:I,onFocus:T,onClick:T},o,{className:(0,p.Z)("tabs__item",d.tabItem,o?.className,{"tabs__item--active":N===t})}),a??t)}))),t?(0,r.cloneElement)(c.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},c.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function h(e){const t=(0,o.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},9346:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>m});var n=a(7462),r=(a(7294),a(3905)),o=a(9877),i=a(2360);const s={sidebar_position:3},l="A first go at parsing GFF",p={unversionedId:"programming/programming_with_gene_annotations3/Getting_started_writing_some_code",id:"programming/programming_with_gene_annotations3/Getting_started_writing_some_code",title:"A first go at parsing GFF",description:"This tutorial will lead you through a process of writing some code to load GFF data into either",source:"@site/docs/programming/programming_with_gene_annotations3/003_Getting_started_writing_some_code.md",sourceDirName:"programming/programming_with_gene_annotations3",slug:"/programming/programming_with_gene_annotations3/Getting_started_writing_some_code",permalink:"/whg-training-resources/programming/programming_with_gene_annotations3/Getting_started_writing_some_code",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/programming_with_gene_annotations3/003_Getting_started_writing_some_code.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar5",previous:{title:"What gene annotation data looks like",permalink:"/whg-training-resources/programming/programming_with_gene_annotations3/What_gene_annotation_data_looks_like"},next:{title:"Extracting the ID and Parent attributes",permalink:"/whg-training-resources/programming/programming_with_gene_annotations3/extracting_attributes"}},d={},m=[{value:"Writing code",id:"writing-code",level:2},{value:"Diving straight in - parsing data",id:"diving-straight-in---parsing-data",level:2},{value:"Test-driven development",id:"test-driven-development",level:2},{value:"Getting it to work",id:"getting-it-to-work",level:2},{value:"A first go",id:"a-first-go",level:3},{value:"Skipping metadata",id:"skipping-metadata",level:3},{value:"Adding column names",id:"adding-column-names",level:3},{value:"Dealing with missing values",id:"dealing-with-missing-values",level:3},{value:"Specifying the right column types",id:"specifying-the-right-column-types",level:3},{value:"Next steps",id:"next-steps",level:2}],h={toc:m},u="wrapper";function c(e){let{components:t,...s}=e;return(0,r.kt)(u,(0,n.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"a-first-go-at-parsing-gff"},"A first go at parsing GFF"),(0,r.kt)("p",null,"This tutorial will lead you through a process of writing some code to load GFF data into ",(0,r.kt)("em",{parentName:"p"},"either"),"\npython or R.  We will then use this to create a useful utility program."),(0,r.kt)("p",null,"The aim of this tutorial is that ",(0,r.kt)("strong",{parentName:"p"},"you")," to write the code that does this (either on your own or\nworking in a group if you prefer). But the tutorial will guide you through one way to do it, and if\nyou run this as part of a ",(0,r.kt)("a",{parentName:"p",href:"www.well.ox.ac.uk"},"WHG")," course, there will be lots of support."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Remember we're not writing this code for it's own sake but to answer our questions like the ones in our introduction:"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"How many genes are there?"),(0,r.kt)("li",{parentName:"ul"},"How big are they?"),(0,r.kt)("li",{parentName:"ul"},"How much of the genome is in genes?"),(0,r.kt)("li",{parentName:"ul"},"How complex are genes - How many exons?  How many different transcripts?"),(0,r.kt)("li",{parentName:"ul"},"How much of genes is actually protein-coding sequence - and how much is untranslated?"),(0,r.kt)("li",{parentName:"ul"},"How much do these patterns differ across species?")),(0,r.kt)("p",{parentName:"div"},"Or indeed any other questions you are interested in."))),(0,r.kt)("p",null,"Nevertheless for the moment we will focus on the programming part of this task, and leave the\nanalysis part until later.  The idea is to guide you to some useful ways to approach coding."),(0,r.kt)("h2",{id:"writing-code"},"Writing code"),(0,r.kt)("p",null,"How to start writing code?  Well, it is worth noting that there are libraries around that will load\nGFF data for you.\n(",(0,r.kt)("a",{parentName:"p",href:"https://bioconductor.org/packages/release/bioc/html/rtracklayer.html"},"rtracklayer")," in R is one).\nConversely, you could use very low-level approaches to doing this - build the data structures\nyourself. But this tutorial will take a 'middle' way - we will use population general 'dataframe'\nlibraries to load the data - ",(0,r.kt)("a",{parentName:"p",href:"https://www.tidyverse.org"},"tidyverse")," in R and\n",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org"},"pandas")," in python.  "),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can choose to use R or python.  One of the interesting things of these libraries is\nthat they are more similar than they are different, so we can write almost the same code in both programming languages."))),(0,r.kt)("p",null,"In the course of the tutorial we'll develop a little R or python library to help us answer the\nquestions."),(0,r.kt)("h2",{id:"diving-straight-in---parsing-data"},"Diving straight in - parsing data"),(0,r.kt)("p",null,"If you ",(0,r.kt)("a",{parentName:"p",href:"What_gene_annotation_data_looks_like.md"},"looked at the gene annotation data"),", you'll know\nthat it comes in rows of data that are tab-delimited. That's good and will be a good fit to a\ndataframe structure. But the data is also relational (meaning that the records refer to each other,\nvia the ",(0,r.kt)("inlineCode",{parentName:"p"},"Parent")," attribute). And since this has several levels (e.g. exons are associated with\ntranscripts, which are in turn associated with genes), we might ultimately have to build some form\nof hierarchical data structure to capture this."),(0,r.kt)("p",null,"That sounds complex, so let's break off a manageable first bit of the job by just focussing on\ngetting the data in. We'll start by trying to write a function that loads the data. We'll call this\nfunction ",(0,r.kt)("inlineCode",{parentName:"p"},"parse_gff3_to_dataframe()")," because that's what it will do. It will look like this:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"parse_gff3_to_dataframe = function( file ):\n    result = (some code to load the data from the file here)\n    return( result )\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def parse_gff3_to_dataframe( file ):\n    result = (some code to load the data from the file here)\n    return result\n")))),"and can be run like this:",(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'X = parse_gff3_to_dataframe( "gencode.v41.annotation.head.gff3" )\n'))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'file = open( "gencode.v41.annotation.head.gff" )\nX = parse_gff3_to_dataframe( file )\n')))),(0,r.kt)("p",null,"This should produce a dataframe with columns ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"parent"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"seqid"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"source"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"type"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"start"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"end"),",\n",(0,r.kt)("inlineCode",{parentName:"p"},"score"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"strand"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"phase"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"attributes"),"."),(0,r.kt)("p",null,"Simple! If only we knew what bit of code to write in the function there."),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Challenge")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Can you write ",(0,r.kt)("inlineCode",{parentName:"p"},"parse_gff3_to_dataframe()"),"?"))),(0,r.kt)("p",null,"To make your function really good, here are a few things it should get right:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it should: ",(0,r.kt)("strong",{parentName:"li"},"deal with column names")),(0,r.kt)("li",{parentName:"ul"},"it should ",(0,r.kt)("strong",{parentName:"li"},"handle missing data values")," right"),(0,r.kt)("li",{parentName:"ul"},"it should ",(0,r.kt)("strong",{parentName:"li"},"get the data types of columns right"),".")),(0,r.kt)("p",null,"And, because we want to capture the relational structure,  it shuld also  extract out the ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"Parent")," attributes as new columns.   (In short - it should pass the ",(0,r.kt)("strong",{parentName:"p"},"test")," in the next section.)\nGood luck!"),(0,r.kt)("p",null,"If you don't know where to start - don't worry, we will walk through a process of writing this\nbelow."),(0,r.kt)("h2",{id:"test-driven-development"},"Test-driven development"),(0,r.kt)("p",null,"Funnily enough our function above already has a useful property, even though we haven't yet written\nit yet!  It is ",(0,r.kt)("em",{parentName:"p"},"already testable"),".  To see this let's design some test data:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'test_data = "##gff-version 3\n#description: test data\nchr1\\tme\\tgene\\t1\\t1000\\t.\\t+\\t.\\tID=gene1;other_data=stuff\nchr1\\tme\\texon\\t10\\t900\\t.\\t+\\t.\\tID=gene1.1;Parent=gene1\n"\n'))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'test_data = """##gff-version 3\n#description: test data\nchr1\\tme\\tgene\\t1\\t1000\\t.\\t+\\t.\\tID=gene1;other_data=stuff\nchr1\\tme\\texon\\t10\\t900\\t.\\t+\\t.\\tID=gene1.1;Parent=gene1\n"""\n')))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"\\t"),"'s in there are ",(0,r.kt)("strong",{parentName:"p"},"tab characters"),".  This is how R and python (and most other programming languages) encode tabs.\nIf you want to see the full data (with tabs expanded), use ",(0,r.kt)("inlineCode",{parentName:"p"},"cat()")," in R or ",(0,r.kt)("inlineCode",{parentName:"p"},"print()")," in python:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"cat( test_data )\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"print( test_data )\n")))),(0,r.kt)("p",{parentName:"div"},"You should see that it's properly GFF formatted."))),(0,r.kt)("p",null,"Now let's use that test data to write a test capturing our requirements:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"test_parse_gff3_to_dataframe = function() {\n    test_data = \"##gff-version 3\n#description: test data\nchr1\\tme\\tgene\\t1\\t1000\\t.\\t+\\t.\\tID=gene1;other_data=stuff\nchr1\\tme\\texon\\t10\\t900\\t.\\t+\\t.\\tID=gene1.1;Parent=gene1\n\"\n    cat( \"Using test data:\\n\" )\n    cat( test_data )\n    # 1. run our function to parse the data:\n    gff = parse_gff3_to_dataframe( test_data )\n    print(gff)\n    # 2. test it:\n    # Check we have all the basic columns\n    columns = c(\n        \"seqid\", \"source\", \"type\", \"start\", \"end\",\n        \"score\", \"strand\", \"phase\", \"attributes\"\n    )\n    stopifnot(\n        length( which( columns %in% colnames(gff) )) == length(columns)\n    )\n    # check some string fields, does it get them right?\n    stopifnot( gff[['seqid']][1] == 'chr1' )\n    stopifnot( gff[['strand']][1] == '+' )\n    stopifnot( gff[['attributes']][1] == 'ID=gene1;other_data=stuff' )\n    stopifnot( gff[['seqid']][2] == 'chr1' )\n    stopifnot( gff[['strand']][2] == '+' )\n    stopifnot( gff[['attributes']][2] == 'ID=gene1.1;Parent=gene1' )\n\n    # check that start and end are integers\n    stopifnot( gff[['start']][1] == 1 )\n    stopifnot( gff[['end']][1] == 1000 )\n    stopifnot( gff[['start']][2] == 10 )\n    stopifnot( gff[['end']][2] == 900 )\n    \n    # check that missing data is handled right\n    # \".\" indicates missing data in the GFF spec\n    # but we should have translated that to an R missing value\n    stopifnot( is.na( gff[['score']][2] ) )\n\n    # check that we extracted `ID` and `Parent` right.\n    stopifnot(\n        length( which( c( \"ID\", \"Parent\" ) %in% colnames(gff) )) == 2\n    )\n\n    stopifnot( gff[['ID']][1] == 'gene1' )\n    stopifnot( gff[['ID']][2] == 'gene1.1' )\n    stopifnot( gff[['Parent']][2] == 'gene1' )\n    # etc.\n    # add your own checks here!\n\n    cat( \"\\n++ test_parse_gff3_to_dataframe(): Congratulations, all tests passed!\\n\" )\n}\n\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def test_parse_gff3_to_dataframe():\n    test_data = \"\"\"##gff-version 3\n#description: test data\nchr1\\tme\\tgene\\t1\\t1000\\t.\\t+\\t.\\tID=gene1;other_data=stuff\nchr1\\tme\\texon\\t10\\t900\\t.\\t+\\t.\\tID=gene1.1;Parent=gene1\n\"\"\"\n    print( \"Using test data:\" )\n    print( test_data )\n    from io import StringIO # see comment below\n        \n    # 1. run our function to parse the data:\n    data = parse_gff3_to_dataframe( StringIO( test_data ))\n    \n    # 2. test it:\n    # check some string fields:\n    assert data['seqid'][0] == 'chr1'\n    assert data['strand'][0] == '+'\n    assert data['attributes'][0] == 'ID=gene1;other_data=stuff'\n    assert data['seqid'][1] == 'chr1'\n    assert data['strand'][1] == '+'\n    assert data['attributes'][1] == 'ID=gene1.1;Parent=gene1'\n    \n    # check that start and end are integers\n    assert data['start'][0] == 1 # start and end are integers, not strings\n    assert data['end'][0] == 1000\n    assert data['start'][1] == 10\n    assert data['end'][1] == 900\n    \n    # check that missing data is handled right\n    # \".\" indicates missing data in the GFF spec\n    # but we should have translated that to `NaN`, which\n    # is pandas' way of indicating missing data.\n    from math import isnan\n    assert isnan( data['score'][1] ) \n    \n    # check that we extracted `ID` and `Parent` right.\n    assert data['ID'][0] == 'gene1'\n    assert data['ID'][1] == 'gene1.1'\n    assert data['Parent'][1] == 'gene1'\n    # etc.\n\n    print( \"++ test_parse_gff3_to_dataframe(): Congratulations,all tests passed!\" )\n")))),(0,r.kt)("p",null,"And then run this to test the function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"test_parse_gff3_to_dataframe()\n")),(0,r.kt)("p",null,"This prints an error, something like:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Error in parse_gff3_to_dataframe(data) : \n  could not find function "parse_gff3_to_dataframe"\n'))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'Traceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "<stdin>", line 5, in test_parse_gff3_to_dataframe\nNameError: name \'parse_gff3_to_dataframe\' is not defined\n')))),(0,r.kt)("p",null,"Of course it's an error - we haven't written the function yet!"),(0,r.kt)("p",null,"But we now have a concrete target to shoot for: when our code passes the test it will be doing the\nright thing."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This style of programming is known as ",(0,r.kt)("strong",{parentName:"p"},"test-driven development")," - in which you write the test(s)\nfirst and only then write the implementation."),(0,r.kt)("p",{parentName:"div"},"You don't have to work this way but it's quite cool if you can bring yourself to do it, because"),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol"},"It makes you figure out how you want your code to be used before you write it."),(0,r.kt)("li",{parentName:"ol"},"It forces you to write code that ",(0,r.kt)("em",{parentName:"li"},"can")," be tested.  (This typically means you end up with pieces that are smallish and hopefully composable)."),(0,r.kt)("li",{parentName:"ol"},"When you've written the code - hey presto, you've also written the tests (no extra work).")),(0,r.kt)("p",{parentName:"div"},"For these reasons I thought we'd get the test in up-front here."))),(0,r.kt)("p",null,"When your function passes the test, you're done! Go ahead and ",(0,r.kt)("a",{parentName:"p",href:"making_a_module.md"},"turn it into a\nmodule"),"."),(0,r.kt)("h2",{id:"getting-it-to-work"},"Getting it to work"),(0,r.kt)("p",null,"To figure out how to write ",(0,r.kt)("inlineCode",{parentName:"p"},"parse_gff3_to_dataframe()")," let's try a few things. Start an R or python\nsession now if you haven't already.  Also make sure you have installed ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/prerequisites/tidyverse"},"the\ntidyverse")," (in R) or ",(0,r.kt)("a",{parentName:"p",href:"/prerequisites/pandas.md"},"pandas")," (in python)\nbecause that's what we'll use.  You can find the documentation for these packages here:"),(0,r.kt)("h3",{id:"a-first-go"},"A first go"),(0,r.kt)("p",null,"The data in a GFF is basically tabular, so let's try to load the data using the function\n",(0,r.kt)("inlineCode",{parentName:"p"},"read_tsv()")," (R) or ",(0,r.kt)("inlineCode",{parentName:"p"},"read_table()")," function (python).  You can find the documentation for this function here:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"for tidyverse in R, search for ",(0,r.kt)("inlineCode",{parentName:"li"},"read_tsv")," in the ",(0,r.kt)("a",{parentName:"li",href:"https://readr.tidyverse.org/reference/index.html"},"readr docuemntation")," "),(0,r.kt)("li",{parentName:"ul"},"for pandas in python, search for `read_table`` in the ",(0,r.kt)("a",{parentName:"li",href:"https://pandas.pydata.org/docs/"},"pandas documentation")," ")),(0,r.kt)("p",null,"Let's have a first go.  To get things working let's work with a small file - the\n\"gencode.v41.annotation.head.gff\" file you ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations3/What_gene_annotation_data_looks_like#making-some-test-files"},"made\nearlier"),":"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'library( readr )\nX = readr::read_tsv( "gencode.v41.annotation.head.gff" )\n'))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import pandas\nX = pandas.read_table( "gencode.v41.annotation.head.gff" )\n')))),(0,r.kt)("p",null,"Try running this now - what happens?"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You will probably find you have an error."),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("p",{parentName:"div"},"If using R, print the resulting dataframe ",(0,r.kt)("inlineCode",{parentName:"p"},"X")," now.  How many rows and columns does it have?  What\nare the first few lines?"),(0,r.kt)("p",{parentName:"div"},"It doesn't look right - can you figure out what has gone wrong?")),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("p",{parentName:"div"},"Running the above command prints out a bunch of stuff and then says, right near the end:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"ParserError : Error tokenizing data. C error: Expected 1 fields in line 8, saw 9\n")),(0,r.kt)("p",{parentName:"div"},"If you're not used to this kind of thing, errors like this may seem pretty cryptic. But they are\noften more helpful than they look at first. This one tells us for example that a problem occurred\non line 8 of the input file. It expected to see 1 field there but found 9. ",(0,r.kt)("a",{parentName:"p",href:"What_gene_annotation_data_looks_like.md"},"Look back at the input\ndata"),". Is there something different about line 8 than\nearlier lines?  (Hint: yes there is!)."))))),(0,r.kt)("h3",{id:"skipping-metadata"},"Skipping metadata"),(0,r.kt)("p",null,"We haven't told the parser about the metadata lines - so it is unsurprisingly confused. For now\nwe're interested in the data records so would like the code to just ignore those lines.  There are a\nfew ways to do this, but the easiest is to tell ",(0,r.kt)("inlineCode",{parentName:"p"},"read_tsv()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"read_table()")," that these lines are\n",(0,r.kt)("strong",{parentName:"p"},"comments")," - that is, bits of text that aren't part of the data.  "),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("p",null,"If you read the ",(0,r.kt)("a",{parentName:"p",href:"https://readr.tidyverse.org/reference/read_delim.html"},(0,r.kt)("inlineCode",{parentName:"a"},"read_tsv()"),"\ndocumentation")," you may spot there's an\nargument called ",(0,r.kt)("inlineCode",{parentName:"p"},"comment"),".  About this argument it says:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"comment"),": ",(0,r.kt)("em",{parentName:"p"},"A string used to identify comments. Any text after the comment characters will be silently ignored.")),(0,r.kt)("p",null,"This sounds like the right thing!  Let's try:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"X = readr::read_tsv(\n    \"gencode.v41.annotation.head.gff\",\n    comment = '#'\n)\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("p",null,"If you read the\n",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/reference/api/pandas.read_table.html"},(0,r.kt)("inlineCode",{parentName:"a"},"read_table()")," documentation"),"\nyou may spot an argument - called ",(0,r.kt)("inlineCode",{parentName:"p"},"comment"),".  About this argument it says:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"comment"),": Character indicating that the remainder of line should not be parsed.  If found at the beginning of a line, the line will be ignored altogether."),(0,r.kt)("p",null,"This sounds like the right thing!  Let's try:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"X = pandas.read_table(\n  \"gencode.v41.annotation.head.gff\",\n  comment = '#'\n)\n")))),(0,r.kt)("p",null,"Try this again.  Does it work?  (Print ",(0,r.kt)("inlineCode",{parentName:"p"},"X")," again to see.)"),(0,r.kt)("p",null,"It sort of works - but not quite.  This begins our long war of attrition to get this in shape."),(0,r.kt)("h3",{id:"adding-column-names"},"Adding column names"),(0,r.kt)("p",null,"At the moment",(0,r.kt)("inlineCode",{parentName:"p"},"X")," doesn't have the right column names. In fact, how could it? The ",(0,r.kt)("a",{parentName:"p",href:"What_gene_annotation_data_looks_like.md"},"file didn't have\nthem in"),"."),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("p",null,"We can fix that by adding a ",(0,r.kt)("a",{parentName:"p",href:"https://readr.tidyverse.org/reference/read_delim.html#arguments"},(0,r.kt)("inlineCode",{parentName:"a"},"col_names"),"\nargument"),". What names? Well, the ones from\n",(0,r.kt)("a",{parentName:"p",href:"https://m.ensembl.org/info/website/upload/gff3.html"},"the GFF spec")," of course:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"X = readr::read_tsv(\n  \"gencode.v41.annotation.head.gff\",\n  comment = '#',\n  col_names = c( 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' )\n)\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("p",null,"We can fix that by adding a\n",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html"},"names")," argument. What names?\nWell, the ones from ",(0,r.kt)("a",{parentName:"p",href:"https://m.ensembl.org/info/website/upload/gff3.html"},"the GFF spec")," of course:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"X = pandas.read_table(\n  \"gencode.v41.annotation.head.gff\",\n  comment = '#',\n  names = [ 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ]\n)\n")))),(0,r.kt)("p",null,"Print out ",(0,r.kt)("inlineCode",{parentName:"p"},"X")," again.  It is starting to look right:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img",src:a(8150).Z,width:"2002",height:"780"})),(0,r.kt)("p",null,"Now it has column names!  "),(0,r.kt)("p",null,"Let's try putting this in our function and testing now?"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"parse_gff3_to_dataframe = function( filename ) {\n    readr::read_tsv(\n        filename,\n        comment = '#',\n        col_names = c( 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' )\n    )\n}\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\ndef parse_gff3_to_dataframe( filename ):\n    pandas.read_table(\n        filename,\n        comment = '#',\n        names = [ 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ]\n    )\n\n")))),(0,r.kt)("p",null,"and run the test: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"test_parse_gff3_to_dataframe()\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Look at the output - does it pass the test?  If not, what fails?  Can you see why?"))),(0,r.kt)("h3",{id:"dealing-with-missing-values"},"Dealing with missing values"),(0,r.kt)("p",null,"This raises a more subtle issue.  The ",(0,r.kt)("a",{parentName:"p",href:"https://m.ensembl.org/info/website/upload/gff3.html"},"spec"),"\nsays that ",(0,r.kt)("inlineCode",{parentName:"p"},".")," indicates a missing value - but our code thinks they are simply strings.  Look:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"print( X$score[1:10] )\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"[ 'this_is_a_%s_character' % s for s in X[\"score\"] ]\n")))),(0,r.kt)("p",null,"Because of this our test is failing when it tests that the ",(0,r.kt)("inlineCode",{parentName:"p"},"score")," has missing values."),(0,r.kt)("p",null,"This is going to make the test fail when it tests for missing data.  Somehow we need to convert\nthose ",(0,r.kt)("inlineCode",{parentName:"p"},"."),"'s to missing values."),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("p",null,"However if you check the ",(0,r.kt)("a",{parentName:"p",href:"https://readr.tidyverse.org/reference/read_delim.html#arguments"},(0,r.kt)("inlineCode",{parentName:"a"},"read_tsv()"),"\ndocs")," again you should see there's\nagain an argument that we can use to tell it to treat specific strings as missing values.  (Can you\nsee it?)"),(0,r.kt)("p",null,"Let's try again:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"parse_gff3_to_dataframe = function( filename ) {\n    readr::read_tsv(\n        filename,\n        comment = '#',\n        col_names = c( 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ),\n        na = \".\"\n    )\n}\ntest_parse_gff3_to_dataframe()\n")),(0,r.kt)("p",null,"Now the missing values come up as ",(0,r.kt)("inlineCode",{parentName:"p"},"NA"),"  - R's shorthand for missing values.")),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("p",null,"However if you read the ",(0,r.kt)("a",{parentName:"p",href:"https://www.google.com/search?client=safari&rls=en&q=panda+read_table"},(0,r.kt)("inlineCode",{parentName:"a"},"read_table()"),"\ndocs")," you'll see this is easy\nas well - we need the ",(0,r.kt)("inlineCode",{parentName:"p"},"na_values")," argument:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def parse_gff3_to_dataframe( filename ):\n    pandas.read_table(\n        filename,\n        comment = '#',\n        names = [ 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ],\n        na_values = '.'\n    )\n")),(0,r.kt)("p",null,"Now the missing values come up as ",(0,r.kt)("inlineCode",{parentName:"p"},"NaN")," (which is\n",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/user_guide/missing_data.html"},"what pandas uses for a missing value"),".\n)"))),(0,r.kt)("h3",{id:"specifying-the-right-column-types"},"Specifying the right column types"),(0,r.kt)("p",null,"There is also the more subtle issue of column types.  Currently our function has guessed the column\ntypes for us, by looking at the data."),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("p",null,"To see them, print ",(0,r.kt)("inlineCode",{parentName:"p"},"X")," again and look at the second row - it will look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"> X\n# A tibble: 993 \xd7 9\n   seqid source type       start   end score strand phase attributes            \n   <chr> <chr>  <chr>      <dbl> <dbl> <chr> <chr>  <chr> <chr>                 \n 1 chr1  HAVANA gene       11869 14409 .     +      .     ID=ENSG00000223972.5;\u2026\n   (etc)\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"<chr>")," means 'character' data (i.e. strings), and ",(0,r.kt)("inlineCode",{parentName:"p"},"<dbl>")," means floating-point numbers. ")),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("p",null,"To see the types, try:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"X.dtypes\n")),(0,r.kt)("p",null,"which prints"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"seqid          object\nsource         object\ntype           object\nstart           int64\nend             int64\nscore         float64\nstrand         object\nphase         float64\nattributes     object\ndtype: object\n")),(0,r.kt)("p",null,"Most of this is actually fine (",(0,r.kt)("inlineCode",{parentName:"p"},"object")," is referring to a python object, which in this case means a\nstring, and it has correctly realised that ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"end")," are integers. It has got ",(0,r.kt)("inlineCode",{parentName:"p"},"phase"),"\nwrong - it thinks it is a floating-poing value, when it\n",(0,r.kt)("a",{parentName:"p",href:"https://m.ensembl.org/info/website/upload/gff3.html"},"really isn't"),"."))),(0,r.kt)("p",null,"So this is pretty good for this particular dataset. But there are good reasons we should fix the column\ntypes. First, they're not quite right at the moment (for example ",(0,r.kt)("inlineCode",{parentName:"p"},"score")," should be a floating-point\nnumber).  More importantly, because we're letting it guess the types from the input data, it might\nconceivable guess different types depending on what data is passed in - likely to break code that\nuses the results."),(0,r.kt)("p",null,"Here we know what the types should be - they're specified in ",(0,r.kt)("a",{parentName:"p",href:"https://m.ensembl.org/info/website/upload/gff3.html"},"the\nspec"),". So let's specify them directly.  "),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("p",null,"The\n",(0,r.kt)("a",{parentName:"p",href:"https://readr.tidyverse.org/reference/read_delim.html"},"documentation")," tells us how to do this:\nthere's a ",(0,r.kt)("inlineCode",{parentName:"p"},"col_types")," argument for this purpose.  The syntax is a bit involved (described\n",(0,r.kt)("a",{parentName:"p",href:"https://readr.tidyverse.org/reference/cols.html"},"here"),"), but works like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"parse_gff3_to_dataframe = function( filename ) {\n    library( readr )\n    readr::read_tsv(\n        filename,\n        comment = '#',\n        na = \".\",\n        col_names = c( 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ),\n        col_types = cols(\n            col_character(),\n            col_character(),\n            col_character(),\n            col_integer(),\n            col_double(),\n            col_double(),\n            col_character(),\n            col_integer(),\n            col_character()\n        )\n    )\n}\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("p",null,"Let's specify them instead using the ",(0,r.kt)("inlineCode",{parentName:"p"},"dtype")," argument:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def parse_gff3_to_dataframe( filename ):\n    return pandas.read_table(\n        filename,\n        comment = '#',\n        names = [ 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ],\n        na_values = '.',\n        dtype = {\n            'seqid': 'string',\n            'source': 'string',\n            'type': 'string',\n            'start': 'Int64',\n            'end': 'Int64',\n            'score': 'float',\n            'strand': 'string',\n            'phase': 'string',\n            'attributes': 'string'\n        }\n    )\n")))),(0,r.kt)("p",null,"And let's try again:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'X = parse_gff3_to_dataframe( "gencode.v41.annotation.head.gff" )\n')),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Run this and look at the output.  Are the column types right now?  (If not, fix them.)"))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Question")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"What about the test - does it pass now?"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"test_parse_gff3_to_dataframe()\n")),(0,r.kt)("p",{parentName:"div"},"If not, why not?"))),(0,r.kt)("h2",{id:"next-steps"},"Next steps"),(0,r.kt)("p",null,"Once you've got your code working - go ahead and ",(0,r.kt)("a",{parentName:"p",href:"making_a_module.md"},"turn it into a module"),"."))}c.isMDXComponent=!0},8150:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/genes_df_1-d0c06b7d34ef9045fb33bafc6b355c3c.png"}}]);
"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[2492],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),h=i,g=d["".concat(o,".").concat(h)]||d[h]||c[h]||r;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=h;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:i,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4610:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:3},l="The pipeline",s={unversionedId:"sequence_data_analysis/building_an_ngs_pipeline/pipeline",id:"sequence_data_analysis/building_an_ngs_pipeline/pipeline",title:"The pipeline",description:"Overview",source:"@site/docs/sequence_data_analysis/building_an_ngs_pipeline/pipeline.md",sourceDirName:"sequence_data_analysis/building_an_ngs_pipeline",slug:"/sequence_data_analysis/building_an_ngs_pipeline/pipeline",permalink:"/whg-training-resources/sequence_data_analysis/building_an_ngs_pipeline/pipeline",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/sequence_data_analysis/building_an_ngs_pipeline/pipeline.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar9",previous:{title:"Introduction",permalink:"/whg-training-resources/sequence_data_analysis/building_an_ngs_pipeline/Introduction"},next:{title:"Tips and tricks",permalink:"/whg-training-resources/sequence_data_analysis/building_an_ngs_pipeline/tips_and_tricks"}},o={},p=[{value:"Overview",id:"overview",level:2},{value:"Good luck!",id:"good-luck",level:2}],u={toc:p},d="wrapper";function c(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"the-pipeline"},"The pipeline"),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,"If you've followed the ",(0,i.kt)("a",{parentName:"p",href:"/whg-training-resources/sequence_data_analysis/building_an_ngs_pipeline/Introduction"},"introduction"),", you should now have a bunch of software\ninstalled, including the ",(0,i.kt)("inlineCode",{parentName:"p"},"snakemake")," pipelining software, and you will have a set of 10 fastq files\nnamed in the format ",(0,i.kt)("inlineCode",{parentName:"p"},"ERR[xxxxxx]_[1|2].fastq.gz"),". And you will also have downloaded the\n",(0,i.kt)("em",{parentName:"p"},"P.falciparum")," reference sequence, ",(0,i.kt)("inlineCode",{parentName:"p"},"Pf3D7_v3.fa.gz")," - hopefully in its own folder\n",(0,i.kt)("inlineCode",{parentName:"p"},"data/reference/"),"."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Challenge")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Write a snakemake pipeline that processes these reads."))),(0,i.kt)("p",null,"When writing the pipeline, here are some points to consider."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Your pipeline should start with the set of fastq read files named by accessions as described in\nthe ",(0,i.kt)("a",{parentName:"li",href:"/whg-training-resources/sequence_data_analysis/building_an_ngs_pipeline/Introduction"},"introduction"),". To keep things well-organised, it's a good idea to keep\nthese in a subdirectory, so they will look something like this:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"   data/reads/ERR377582_1.fastq.gz\n   data/reads/ERR377582_2.fastq.gz\n   data/reads/ERR377591_1.fastq.gz\n   data/reads/ERR377591_2.fastq.gz\n   data/reads/ERR377629_1.fastq.gz\n   data/reads/ERR377629_2.fastq.gz\n   data/reads/ERR417621_1.fastq.gz\n   data/reads/ERR417621_2.fastq.gz\n   data/reads/ERR417627_1.fastq.gz\n   data/reads/ERR417627_2.fastq.gz\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"You will also need the reference sequence, placed in ",(0,i.kt)("inlineCode",{parentName:"p"},"data/reference/Pf3D7_v3.fa.gz"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The pipeline will ",(0,i.kt)("strong",{parentName:"p"},"output")," a set of BAM files containing these reads aligned to the a reference\nsequence. The reads should be ",(0,i.kt)("em",{parentName:"p"},"coordinate sorted"),", duplicate read pairs should have been ",(0,i.kt)("em",{parentName:"p"},"marked\nor removed"),", and the BAM files should be ",(0,i.kt)("em",{parentName:"p"},"indexed"),". What's more, the files should be named by\nsample name not the accession.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"My advice is to put output files in a seperate subdirectory, so they will look something like\nthis:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    results/aligned/QG0033-C.bam\n    results/aligned/QG0033-C.bam.bai\n    results/aligned/QG0041-C.bam\n    results/aligned/QG0041-C.bam.bai\n    results/aligned/QG0049-C.bam\n    results/aligned/QG0049-C.bam.bai\n    results/aligned/QG0056-C.bam\n    results/aligned/QG0056-C.bam.bai\n    results/aligned/QG0088-C.bam\n    results/aligned/QG0088-C.bam.bai\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The pipeline should also perform QC of the fastq files. We suggest using ",(0,i.kt)("inlineCode",{parentName:"li"},"fastqc")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"multiqc"),"\nfor this. So this will output some more files that look like this:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    results/qc/QG0033-C.fastqc.html\n    results/qc/QG0041-C.fastqc.html\n    results/qc/QG0049-C.fastqc.html\n    results/qc/QG0056-C.fastqc.html\n    results/qc/QG0088-C.fastqc.html\n    results/qc/multiqc_report.html\n")),(0,i.kt)("p",null,"You should of course look at the output to look for anything odd!  (See the\n",(0,i.kt)("a",{parentName:"p",href:"../introduction_to_next_generation_sequencing_data_analysis"},"tutorial on NGS data")," for lots\nof information on how to interpret these files.)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The pipeline will also output a\n",(0,i.kt)("a",{parentName:"li",href:"http://genome.ucsc.edu/goldenPath/help/bedgraph.html"},(0,i.kt)("inlineCode",{parentName:"a"},"bedgraph"))," file for each sample,\nreporting the coverage at each site in the genome. (",(0,i.kt)("inlineCode",{parentName:"li"},"bedtools genomecov -bg")," is a good way to\ncreate this). These will look like this:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    results/coverage/QG0033-C.coverage.bedgraph\n    results/coverage/QG0041-C.coverage.bedgraph\n    results/coverage/QG0049-C.coverage.bedgraph\n    results/coverage/QG0056-C.coverage.bedgraph\n    results/coverage/QG0088-C.coverage.bedgraph\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"And, if you implement the whole pipeline, it will also output a variant calls file (for this\ntutorial we suggest using the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/luntergroup/octopus"},(0,i.kt)("inlineCode",{parentName:"a"},"octopus")," variant caller"),"\nfor this). These will be an indexed bgzipped ",(0,i.kt)("a",{parentName:"li",href:"https://samtools.github.io/hts-specs/VCFv4.2.pdf"},"vcf\nfile"),", which should look something like this:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"    results/variant_calls/variant_calls.vcf.gz\n    results/variant_calls/variant_calls.vcf.gz.tbi\n")),(0,i.kt)("p",null,"Easy, right?  Here is a diagram of the overall pipeline:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Diagram of pipeline",src:n(6154).Z,width:"1722",height:"1971"})),(0,i.kt)("p",null,"You have to implement a least the green bits... good luck!"),(0,i.kt)("p",null,"(If you are running this as part of a ",(0,i.kt)("a",{parentName:"p",href:"www.well.ox.ac.uk"},"WHG course"),", we'll discuss your pipeline\nand look at the outputs at the wrap-up session later in the week.)"),(0,i.kt)("h2",{id:"good-luck"},"Good luck!"),(0,i.kt)("p",null,"As you can see we are dropping you in at the deep end - good luck!"),(0,i.kt)("p",null,"To help with your journey, however, we have provided some ",(0,i.kt)("a",{parentName:"p",href:"/whg-training-resources/sequence_data_analysis/building_an_ngs_pipeline/tips_and_tricks"},"tips and tricks"),".\nThese should help you get started."))}c.isMDXComponent=!0},6154:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/pipeline-f7b1538da80891cc35465d36fdd41f64.svg"}}]);
"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[8081],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),c=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=c(e.components);return o.createElement(l.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(t),g=r,h=u["".concat(l,".").concat(g)]||u[g]||p[g]||a;return t?o.createElement(h,s(s({ref:n},m),{},{components:t})):o.createElement(h,s({ref:n},m))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=g;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<a;c++)s[c]=t[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},2360:(e,n,t)=>{t.d(n,{Z:()=>s});var o=t(7294),r=t(6010);const a={tabItem:"tabItem_OmH5"};function s(e){let{children:n,hidden:t,className:s}=e;return o.createElement("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,s),hidden:t},n)}},9877:(e,n,t)=>{t.d(n,{Z:()=>p});var o=t(7462),r=t(7294),a=t(2389),s=t(7392),i=t(7094),l=t(2466),c=t(6010);const m={tabList:"tabList_uSqn",tabItem:"tabItem_LplD"};function u(e){const{lazy:n,block:t,defaultValue:a,values:u,groupId:p,className:g}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),d=u??h.map((e=>{let{props:{value:n,label:t,attributes:o}}=e;return{value:n,label:t,attributes:o}})),_=(0,s.l)(d,((e,n)=>e.value===n.value));if(_.length>0)throw new Error(`Docusaurus error: Duplicate values "${_.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const v=null===a?a:a??h.find((e=>e.props.default))?.props.value??h[0]?.props.value;if(null!==v&&!d.some((e=>e.value===v)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${v}" but none of its children has the corresponding value. Available values are: ${d.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:b}=(0,i.U)(),[w,k]=(0,r.useState)(v),y=[],{blockElementScrollPositionUntilNextRender:N}=(0,l.o5)();if(null!=p){const e=f[p];null!=e&&e!==w&&d.some((n=>n.value===e))&&k(e)}const x=e=>{const n=e.currentTarget,t=y.indexOf(n),o=d[t].value;o!==w&&(N(n),k(o),null!=p&&b(p,o))},C=e=>{let n=null;switch(e.key){case"ArrowRight":{const t=y.indexOf(e.currentTarget)+1;n=y[t]||y[0];break}case"ArrowLeft":{const t=y.indexOf(e.currentTarget)-1;n=y[t]||y[y.length-1];break}}n?.focus()};return r.createElement("div",{className:(0,c.Z)("tabs-container",m.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":t},g)},d.map((e=>{let{value:n,label:t,attributes:a}=e;return r.createElement("li",(0,o.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:e=>y.push(e),onKeyDown:C,onFocus:x,onClick:x},a,{className:(0,c.Z)("tabs__item",m.tabItem,a?.className,{"tabs__item--active":w===n})}),t??n)}))),n?(0,r.cloneElement)(h.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function p(e){const n=(0,a.Z)();return r.createElement(u,(0,o.Z)({key:String(n)},e))}},7575:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var o=t(7462),r=(t(7294),t(3905)),a=t(9877),s=t(2360);const i={sidebar_position:3},l="How much of the genome is *really* in genes?",c={unversionedId:"programming/analysing_genes_across_species/how_much_in_genes/how_much_II",id:"programming/analysing_genes_across_species/how_much_in_genes/how_much_II",title:"How much of the genome is *really* in genes?",description:"If you followed the previous section you'll have a function mergeregions()",source:"@site/docs/programming/analysing_genes_across_species/how_much_in_genes/003_how_much_II.md",sourceDirName:"programming/analysing_genes_across_species/how_much_in_genes",slug:"/programming/analysing_genes_across_species/how_much_in_genes/how_much_II",permalink:"/whg-training-resources/programming/analysing_genes_across_species/how_much_in_genes/how_much_II",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/analysing_genes_across_species/how_much_in_genes/003_how_much_II.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"sidebar5",previous:{title:"An algorithm to merge regions",permalink:"/whg-training-resources/programming/analysing_genes_across_species/how_much_in_genes/an_algorithm_to_merge_regions"},next:{title:"How much of the genome is in exons?",permalink:"/whg-training-resources/programming/analysing_genes_across_species/how_much_in_genes/how_much_in_exons"}},m={},u=[],p={toc:u},g="wrapper";function h(e){let{components:n,...t}=e;return(0,r.kt)(g,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-much-of-the-genome-is-really-in-genes"},"How much of the genome is ",(0,r.kt)("em",{parentName:"h1"},"really")," in genes?"),(0,r.kt)("p",null,"If you followed the ",(0,r.kt)("a",{parentName:"p",href:"./009_an_algorithm_to_merge_regions.md"},"previous section")," you'll have a function ",(0,r.kt)("inlineCode",{parentName:"p"},"merge_regions()"),"\nthat can 'merge' a set of possibly overlapping regions into a set that don't overlap (but cover the same regions).\nLet's use this to correct our computation of the proportion of genome in genes now."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you didn't manage to complete it - don't worry.  My final version is here:"),(0,r.kt)(a.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"hide",label:"Hint",mdxType:"TabItem"},(0,r.kt)("p",{parentName:"div"},"Click the tab above to reveal the solution.")),(0,r.kt)(s.Z,{value:"R",label:"Solution",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-r"},"merge_regions = function( input_regions ) {\n   # Catch the case where there's only one or no regions\n   # There's nothing to do in this case, may as well just return the input regions:\n   if( nrow( input_regions ) < 2 ) {\n      return( input_regions ) ;\n   }\n\n   # Otherwise:\n   # Sort regions by position\n   input_regions = input_regions %>% arrange( start, end )\n\n   # Create variables to put the result in\n   result = tibble()\n   current_merged_region = input_regions[1,]\n\n   # Loop over regions\n   for( i in 2:nrow(input_regions)) {\n      next_region = input_regions[i,]\n\n      overlapping = (next_region$start <= current_merged_region$end)\n      if( overlapping ) {\n         current_merged_region$end = max( current_merged_region$end, next_region$end )\n      } else {\n         result = rbind( result, current_merged_region )\n         # Start a new region!\n         current_merged_region = next_region\n      }\n   }\n\n   # Add the last region\n   result = rbind(\n      result,\n      current_merged_region\n   )\n\n   return( result )\n}\n")),(0,r.kt)("p",{parentName:"div"},"(You can run the test to make sure it works.)"))))),(0,r.kt)("p",null,"We can use this to compute the ",(0,r.kt)("em",{parentName:"p"},"length")," of a set of regions as follows.  (We'll put in a print statement so we can see what's happening.):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"compute_length_of_regions <- function( input_regions ) {\n    merged = merge_regions( input_regions )\n    sum( merged$end - merged$start + 1 )\n}\n")),(0,r.kt)("p",null,"So let's go back to ",(0,r.kt)("a",{parentName:"p",href:"./008_How_much_of_the_genome_is_in_genes.md#naive-approach"},"our code to compute the total length of genes on each\nchromosome")," and make it use this function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'compute_lengths_per_chromosome = function(\n   data,\n   chromosomes = contigs\n) {\n   (\n      data\n      # Group by species / chromosome\n      %>% group_by( dataset, seqid )\n      # Add up the gene lengths\n      %>% summarise(\n         number_of_regions          = n(),\n         naive_total_length_covered = sum( end - start + 1 ),\n         total_length_covered       = compute_length_of_regions( pick( start, end ) )\n      )\n      # Add the chromosome lengths\n      %>% left_join(\n         chromosomes[, c( "dataset", "seqid", "attributes", "sequence_length" )],\n         by = c( "dataset", "seqid" )\n      )\n   )\n}\n\n')),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you compare this to the ",(0,r.kt)("a",{parentName:"p",href:"./008_How_much_of_the_genome_is_in_genes.md#naive-approach"},"previous, incorrect code")," you'll\nsee it's the same, except that we've used our ",(0,r.kt)("inlineCode",{parentName:"p"},"compute_length_of_regions()")," instead of just summing the lengths.\n(But I've kept the naive calculation in there as well for comparison.)"),(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("a",{parentName:"p",href:"https://dplyr.tidyverse.org/reference/pick.html"},(0,r.kt)("inlineCode",{parentName:"a"},"pick()"))," function is a way to create a tibble of just the start\nand end coordinates for each of our chromosomes, and pass it into our function."))),(0,r.kt)("p",null,"Let's run that now to get the correct lengths:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"correct_lengths = compute_lengths_per_chromosome( genes )\nprint( correct_lengths )\n")),(0,r.kt)("p",null,"This takes a minute or two to run - after all, it has to run our merging loop for each species and chromosome."),(0,r.kt)("p",null,"Now at last we can compute the proportion of each genome covered by genes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"compute_proportion_of_genome_covered = function(\n    per_chromosome_lengths\n) {\n    (\n        per_chromosome_lengths\n        %>% group_by( dataset )\n        %>% summarise(\n            naive_total_length_covered = sum( naive_total_length_covered ),\n            total_length_covered = sum( total_length_covered ),\n            total_genome_length = sum( sequence_length )\n        )\n        %>% mutate(\n            naive_proportion_covered = naive_total_length_covered / total_genome_length,\n            proportion_covered = total_length_covered / total_genome_length\n        )\n    )\n}\n")),(0,r.kt)("p",null,"It looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"gene_proportions = compute_proportion_of_genome_covered( correct_lengths )\nprint( gene_proportions )\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# A tibble: 11 \xd7 6\n   dataset                                           naive_total_length_covered total_length_covered total_genome_length naive_proportion_covered proportion_covered\n   <chr>                                                                  <dbl>                <dbl>               <dbl>                    <dbl>              <dbl>\n 1 Acanthochromis_polyacanthus.ASM210954v1.110                        422171067            415283627           830201259                    0.509              0.500\n 2 Asparagus_officinalis.Aspof.V1.57                                  165883925            165883925          1015569172                    0.163              0.163\n 3 Bufo_bufo-GCA_905171765.1-2022_05-genes                           1290309576           1267077494          5003028965                    0.258              0.253\n 4 Camelus_dromedarius.CamDro2.110.chr                                825762826            815771759          2052758708                    0.402              0.397\n 5 Gallus_gallus.bGalGal1.mat.broiler.GRCg7b.110.chr                  583352821            556604796          1041139641                    0.560              0.535\n 6 Homo_sapiens.GRCh38.110.chr                                       1379802830           1305325027          3088286401                    0.447              0.423\n 7 Mus_musculus.GRCm39.110.chr                                       1070748851           1040456122          2723431143                    0.393              0.382\n 8 Pan_troglodytes.Pan_tro_3.0.110.chr                               1110722691           1101782444          2967125077                    0.374              0.371\n 9 Plasmodium_falciparum.ASM276v2.57                                   13776689             13577802            23292622                    0.591              0.583\n10 Plasmodium_knowlesi.ASM635v1.57                                     12970692             12970692            23462187                    0.553              0.553\n11 Plasmodium_vivax.ASM241v2.57                                        14052272             14020584            23768694                    0.591              0.590\n")),(0,r.kt)("p",null,"You can see that the correct proportion is a bit (but not much) smaller than the ",(0,r.kt)("inlineCode",{parentName:"p"},"naive_total_region_length")," column."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Question")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"How much difference was there between the 'naive' calculation and the correct one?  Was it big enough to worry about?"))))}h.isMDXComponent=!0}}]);
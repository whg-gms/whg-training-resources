"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[2893],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",_={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),p=d(t),g=s,m=p["".concat(c,".").concat(g)]||p[g]||_[g]||a;return t?r.createElement(m,i(i({ref:n},l),{},{components:t})):r.createElement(m,i({ref:n},l))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,i=new Array(a);i[0]=g;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[p]="string"==typeof e?e:s,i[1]=o;for(var d=2;d<a;d++)i[d]=t[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3690:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>_,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=t(7462),s=(t(7294),t(3905));const a={sidebar_position:5},i="Too long, didn't read",o={unversionedId:"programming/analysing_genes_across_species/extreme_genes/tldr",id:"programming/analysing_genes_across_species/extreme_genes/tldr",title:"Too long, didn't read",description:"Here is all the code from this section in one place for reference.  I've slightly reorganised in places.",source:"@site/docs/programming/analysing_genes_across_species/extreme_genes/006_tldr.md",sourceDirName:"programming/analysing_genes_across_species/extreme_genes",slug:"/programming/analysing_genes_across_species/extreme_genes/tldr",permalink:"/whg-training-resources/programming/analysing_genes_across_species/extreme_genes/tldr",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/analysing_genes_across_species/extreme_genes/006_tldr.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"sidebar5",previous:{title:"Extreme genes revisited",permalink:"/whg-training-resources/programming/analysing_genes_across_species/extreme_genes/extreme_genes_revisited"},next:{title:"Getting chromosome lengths",permalink:"/whg-training-resources/programming/analysing_genes_across_species/getting_chromosomes"}},c={},d=[],l={toc:d},p="wrapper";function _(e){let{components:n,...t}=e;return(0,s.kt)(p,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"too-long-didnt-read"},"Too long, didn't read"),(0,s.kt)("p",null,"Here is all the code from this section in one place for reference.  I've slightly reorganised in places."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-r"},'library( RSQLite )\nlibrary( dplyr )\nlibrary( dbplyr )\n\ndb = DBI::dbConnect( RSQLite::SQLite(), "genes.sqlite" )\n\n# 1. Load the genes...\ngenes = (\n    db\n    %>% tbl( "gff" )\n    %>% filter( type == \'gene\' & biotype == \'protein_coding\' )\n    %>% select( dataset, gene_id = ID, seqid, start, end, strand, Name, biotype )\n    %>% collect()\n)\n\n# ...transcripts...\ntranscripts = (\n    db\n    %>% tbl( "gff" )\n    %>% filter( type == \'mRNA\' )\n    %>% select(\n        dataset, gene_id = Parent, transcript_id = ID,\n        transcript_start = start, transcript_end = end,\n        transcript_attributes = attributes\n    )\n    %>% collect()\n)\n\n# ...exons...\nexons = (\n    db\n    %>% tbl( "gff" )\n    %>% filter( type == \'exon\' )\n    %>% select( dataset, exon_id = ID, transcript_id = Parent, seqid, exon_start = start, exon_end = end )\n    %>% collect()\n)\n\n# ...and cds.\ncds = (\n    db\n    %>% tbl( \'gff\' )\n    %>% filter( type == "CDS" )\n    %>% select(\n        dataset, cds_id = ID, transcript_id = Parent,\n        cds_seqid = seqid, cds_start = start, cds_end = end\n    )\n    %>% collect()\n)\n\n# 2. Count transcripts per gene\ntranscripts_per_gene = (\n    genes\n    %>% left_join(\n        transcripts,\n        by = c( \'dataset\', \'gene_id\' )\n    )\n    %>% group_by( dataset, gene_id )\n    %>% summarise(\n        number_of_transcripts = n(),\n        min_transcript_length = min( transcript_end - transcript_start + 1 ),\n        max_transcript_length = min( transcript_end - transcript_start + 1 )\n    )\n)\n\n# 3. Compute \'canonical\' transcripts\ntranscripts_and_cds = (\n    transcripts\n    %>% left_join(\n        cds,\n        by = c( "dataset", "transcript_id" )\n    )\n    %>% group_by(\n        dataset,\n        gene_id,\n        transcript_id\n    )\n    %>% summarise(\n        number_of_cds = n(),\n        cds_length = sum( cds_end - cds_start + 1 ),\n        cds_start = min( cds_start ),\n        cds_end = max( cds_end )\n    )\n)\n\ncanonical_transcripts = (\n    transcripts_and_cds\n    %>% arrange(\n        dataset, gene_id, transcript_id,\n        desc( cds_length )\n    )\n    %>% group_by( dataset, gene_id )\n    %>% summarise(\n        canonical_transcript_id = head( transcript_id, 1 ),\n        number_of_cds = head( number_of_cds, 1 ),\n        cds_start = head( cds_start, 1 ),\n        cds_end = head( cds_end, 1 ),\n        cds_length = head( cds_length, 1 )\n    )\n)\n\n# 4. Compute exons summary for each transcript\nexon_counts = (\n    transcripts\n    %>% inner_join(\n        exons,\n        by = c( "dataset", "transcript_id" )\n    )\n    %>% group_by( dataset, transcript_id )\n    %>% summarise(\n        number_of_exons = n(),\n        exons_start = min( exon_start ),\n        exons_end = max( exon_end ),\n        exon_length = sum( exon_end - exon_start + 1 )\n    )\n)\n\n# 5. Add sumaries to genes table:\ngenes$length = genes$end - genes$start + 1\n\ngenes = (\n    genes\n    %>% left_join(\n        transcripts_per_gene,\n        by = c( "dataset", "gene_id" )\n    )\n    %>% left_join(\n        canonical_transcripts,\n        by = c( "dataset", "gene_id" )\n    )\n    %>% left_join(\n        exon_counts,\n        by = join_by(\n            dataset == \'dataset\',\n            canonical_transcript_id == \'transcript_id\'\n        )\n    )\n)\n\n')))}_.isMDXComponent=!0}}]);
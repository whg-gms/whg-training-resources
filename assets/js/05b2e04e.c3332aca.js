"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[6606],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(a),c=r,g=d["".concat(l,".").concat(c)]||d[c]||u[c]||o;return a?n.createElement(g,i(i({ref:t},m),{},{components:a})):n.createElement(g,i({ref:t},m))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2360:(e,t,a)=>{a.d(t,{Z:()=>i});var n=a(7294),r=a(6010);const o={tabItem:"tabItem_OmH5"};function i(e){let{children:t,hidden:a,className:i}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:a},t)}},9877:(e,t,a)=>{a.d(t,{Z:()=>u});var n=a(7462),r=a(7294),o=a(2389),i=a(7392),s=a(7094),l=a(2466),p=a(6010);const m={tabList:"tabList_uSqn",tabItem:"tabItem_LplD"};function d(e){const{lazy:t,block:a,defaultValue:o,values:d,groupId:u,className:c}=e,g=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=d??g.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),f=(0,i.l)(h,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===o?o:o??g.find((e=>e.props.default))?.props.value??g[0]?.props.value;if(null!==k&&!h.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:N}=(0,s.U)(),[y,b]=(0,r.useState)(k),_=[],{blockElementScrollPositionUntilNextRender:w}=(0,l.o5)();if(null!=u){const e=v[u];null!=e&&e!==y&&h.some((t=>t.value===e))&&b(e)}const x=e=>{const t=e.currentTarget,a=_.indexOf(t),n=h[a].value;n!==y&&(w(t),b(n),null!=u&&N(u,n))},T=e=>{let t=null;switch(e.key){case"ArrowRight":{const a=_.indexOf(e.currentTarget)+1;t=_[a]||_[0];break}case"ArrowLeft":{const a=_.indexOf(e.currentTarget)-1;t=_[a]||_[_.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,p.Z)("tabs-container",m.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":a},c)},h.map((e=>{let{value:t,label:a,attributes:o}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>_.push(e),onKeyDown:T,onFocus:x,onClick:x},o,{className:(0,p.Z)("tabs__item",m.tabItem,o?.className,{"tabs__item--active":y===t})}),a??t)}))),t?(0,r.cloneElement)(g.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},g.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function u(e){const t=(0,o.Z)();return r.createElement(d,(0,n.Z)({key:String(t)},e))}},2446:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>p,toc:()=>d});var n=a(7462),r=(a(7294),a(3905)),o=a(9877),i=a(2360);const s={sidebar_position:5},l="Testing it out",p={unversionedId:"programming/programming_with_gene_annotations3/testing_it_out",id:"programming/programming_with_gene_annotations3/testing_it_out",title:"Testing it out",description:"Hopefully you have now got a working function, parsegff3to_dataframe() and got the extremely rewarding message:",source:"@site/docs/programming/programming_with_gene_annotations3/005_testing_it_out.md",sourceDirName:"programming/programming_with_gene_annotations3",slug:"/programming/programming_with_gene_annotations3/testing_it_out",permalink:"/whg-training-resources/programming/programming_with_gene_annotations3/testing_it_out",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/programming_with_gene_annotations3/005_testing_it_out.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"sidebar5",previous:{title:"Extracting the ID and Parent attributes",permalink:"/whg-training-resources/programming/programming_with_gene_annotations3/extracting_attributes"},next:{title:"Quick recap",permalink:"/whg-training-resources/programming/programming_with_gene_annotations3/recap"}},m={},d=[{value:"Trying some real data",id:"trying-some-real-data",level:2},{value:"Next steps",id:"next-steps",level:2}],u={toc:d},c="wrapper";function g(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"testing-it-out"},"Testing it out"),(0,r.kt)("p",null,"Hopefully you have now got a working function, ",(0,r.kt)("inlineCode",{parentName:"p"},"parse_gff3_to_dataframe()")," and got the extremely rewarding message:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"++ test_parse_gff3_to_dataframe(): Congratulations,all tests passed!\n")),(0,r.kt)("p",null,"If not here is my solution:"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Solution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)(o.Z,{groupId:"solutions",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"teaser",label:"Solution",mdxType:"TabItem"},"Please try to code it yourself first of course!  See the tabs for solutions."),(0,r.kt)(i.Z,{value:"R",label:"R solution",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-r"},"parse_gff3_to_dataframe = function( filename ) {\n    result = readr::read_tsv(\n        filename,\n        comment = '#',\n        na = \".\",\n        col_names = c( 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ),\n        col_types = readr::cols(\n            readr::col_character(),\n            readr::col_character(),\n            readr::col_character(),\n            readr::col_integer(),\n            readr::col_double(),\n            readr::col_double(),\n            readr::col_character(),\n            readr::col_integer(),\n            readr::col_character()\n        )\n    )\n    result[['ID']] = stringr::str_extract( result[['attributes']], 'ID=([^;]+)', group = TRUE )\n    result[['Parent']] = stringr::str_extract( result[['attributes']], 'Parent=([^;]+)', group = TRUE )\n    return( result )\n}\n\ntest_parse_gff3_to_dataframe()\n")),(0,r.kt)("p",{parentName:"div"},(0,r.kt)("strong",{parentName:"p"},"Note.")," Those ",(0,r.kt)("inlineCode",{parentName:"p"},"readr::")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"stringr::")," bits are optional - you could just do ",(0,r.kt)("inlineCode",{parentName:"p"},"library( tidyverse )")," at the top.")),(0,r.kt)(i.Z,{value:"python",label:"python solution",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def parse_gff3_to_dataframe( file ):\n    import pandas\n    result = pandas.read_table(\n        file,\n        comment = '#',\n        names = [ 'seqid', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase', 'attributes' ],\n        na_values = '.',\n        dtype = {\n            'seqid': str,\n            'source': str,\n            'type': str,\n            'start': int,\n            'end': int,\n            'score': float,\n            'strand': str,\n            'phase': str,\n            'attributes': str\n        }\n    )\n    result.insert( loc = 0, column = 'ID', value = None )\n    result.insert( loc = 1, column = 'Parent', value = None )\n    result['ID'] = result.attributes.str.extract( 'ID=([^;]+)' )\n    result['Parent'] = result.attributes.str.extract( 'Parent=([^;]+)' )\n    return result\n\n")))),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"test_parse_gff3_to_dataframe()\n")))),(0,r.kt)("h2",{id:"trying-some-real-data"},"Trying some real data"),(0,r.kt)("p",null,"You ought to be able to load some real data now.  Does it work on the full gencode file? "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'gencode = parse_gff3_to_dataframe( "gencode.v41.annotation.gff3.gz" )\n')),(0,r.kt)("p",null,"What about the file downloaded from Ensembl - called something like ",(0,r.kt)("inlineCode",{parentName:"p"},"Homo_sapiens.GRCh38.107.chr.gff3.gz")," or similar -\ndoes it work? What about the ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations3/What_gene_annotation_data_looks_like"},(0,r.kt)("em",{parentName:"a"},"P.falciparum")," file"),"?"),(0,r.kt)("p",null,"Use your R skills ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/introduction_to_R/working_with_data"},"from the Introduction to R tutorial")," or python\nskills to view these files and explore a bit - for example pulling out all gene records, or records pertaining to\nspecific genes.  (For example you could look at ",(0,r.kt)("em",{parentName:"p"},"FUT2"),", which has ",(0,r.kt)("inlineCode",{parentName:"p"},"ID=ENSG00000176920.13"),", or at ",(0,r.kt)("inlineCode",{parentName:"p"},"PF3D7_1127000")," in the\n",(0,r.kt)("em",{parentName:"p"},"P.falciparum")," genome)."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("p",{parentName:"div"},"Here's a cool way to filter the dataframe - using a kind of 'pipe', just like the one in bash.\nInstead of using ",(0,r.kt)("inlineCode",{parentName:"p"},"filter()")," like this:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"filter( gencode, ID == `ENSG00000176920.13` )\n")),(0,r.kt)("p",{parentName:"div"},"you can write"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"X %>% filter( ID == `ENSG00000176920.13` )\n")),(0,r.kt)("p",{parentName:"div"},"Here ",(0,r.kt)("inlineCode",{parentName:"p"},"%>%")," plays the same role as ",(0,r.kt)("inlineCode",{parentName:"p"},"|")," does in bash - it ",(0,r.kt)("em",{parentName:"p"},"pipes")," the output of one command into the input of the next.\nThe advantage is that you can put multiple things in the same pipeline.  For example let's find all the ",(0,r.kt)("em",{parentName:"p"},"FUT2")," transcripts\nthat start before ",(0,r.kt)("inlineCode",{parentName:"p"},"chr19:48,696,000"),":"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"(\n    gencode\n    %>% filter( Parent == 'ENSG00000176920.13' )\n    %>% filter( start < 48696000 )\n)\n\n")),(0,r.kt)("p",{parentName:"div"},"So, just like in the command-line, you can build up ",(0,r.kt)("em",{parentName:"p"},"pipelines")," of commands to get the data you want.  This filtering\nsyntax is a feature of ",(0,r.kt)("a",{parentName:"p",href:"https://dplyr.tidyverse.org"},"dplyr"),", which is part of ",(0,r.kt)("a",{parentName:"p",href:"https://www.tidyverse.org"},"tidyverse"),".")),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("p",{parentName:"div"},"Here's a cool way to filter the data frame by rows in python - use\n",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html"},(0,r.kt)("inlineCode",{parentName:"a"},"query()")),".  This takes a string as an\nexpression, for example:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"gencode.query( \"ID == 'ENSG00000176920.13'\" )\n")),(0,r.kt)("p",{parentName:"div"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"query()")," function is actually part of the dataframe object (it's a 'method' of the dataframe), which is why you can\ncall it in the style '",(0,r.kt)("inlineCode",{parentName:"p"},"object.method()"),"'."),(0,r.kt)("p",{parentName:"div"},"This also makes it easy to chain multiple filtering criteria together. For example, let's find all the ",(0,r.kt)("em",{parentName:"p"},"FUT2"),"\ntranscripts that start before ",(0,r.kt)("inlineCode",{parentName:"p"},"chr19:48,696,000"),":"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'(\n    gencode\n    .query( "Parent == \'ENSG00000176920.13\'" )\n    .query( "start < 48696000" )\n)\n')),(0,r.kt)("p",{parentName:"div"},"This dataframe and filtering syntax is part of ",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org"},"pandas"),"."))))),(0,r.kt)("p",null,"If it's working, well done!"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Another great thing to do is ",(0,r.kt)("em",{parentName:"p"},"group")," and ",(0,r.kt)("em",{parentName:"p"},"count")," the data - much like the ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/bioinformatics/exploring_gene_annotations_in_bash/counting"},"pipeline using ",(0,r.kt)("inlineCode",{parentName:"a"},"uniq -c")," in\nBASH"),".  For example let's make a count of record\ntypes:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-r"},"(\n    gencode\n    %>% group_by( type )\n    %>% summarise( count = n() )\n)\n")),(0,r.kt)("p",{parentName:"div"},(0,r.kt)("strong",{parentName:"p"},"Note"),". Another way to do this is R's built-in function ",(0,r.kt)("inlineCode",{parentName:"p"},"table()"),":"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"table( gencode$type )\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'(\n    gencode\n    .groupby( "type" )\n    .agg({ "ID": \'count\' })\n)\n')),(0,r.kt)("p",{parentName:"div"},"This works, but I personally find this piece of code and its output harder to understand than the R / dplyr version.\nAnother way to do this in pandas is to use the simpler ",(0,r.kt)("inlineCode",{parentName:"p"},"value_counts()"),":"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"gencode['type'].value_counts()\n")),(0,r.kt)("p",{parentName:"div"},"...although that returns something called a 'Series', as opposed to a data frame."))))),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"As you start to play around with loading multiple files, keep an eye on the memory usage of your process.  (You can do\nthis in your system monitor, or by opening a terminal and running:"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"top -u <username> -o '%MEM'")," on linux or Ubuntu for Windows; or"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"top -U gav -o MEM")," in Mac OS")))),(0,r.kt)("h2",{id:"next-steps"},"Next steps"),(0,r.kt)("p",null,"A better way to solve the memory issue to store the data in a database and only load what's needed into memory - we'll\nsee a way to do that ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations3/Converting_gff_to_sqlite"},"later"),".  But first let's ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations3/making_a_module"},"package up the\ncode"),"."))}g.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[1519],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=p(n),g=r,h=u["".concat(s,".").concat(g)]||u[g]||m[g]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2360:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_OmH5"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,i),hidden:n},t)}},9877:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),r=n(7294),o=n(2389),i=n(7392),l=n(7094),s=n(2466),p=n(6010);const d={tabList:"tabList_uSqn",tabItem:"tabItem_LplD"};function u(e){const{lazy:t,block:n,defaultValue:o,values:u,groupId:m,className:g}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),c=u??h.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,i.l)(c,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===o?o:o??h.find((e=>e.props.default))?.props.value??h[0]?.props.value;if(null!==k&&!c.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${c.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:b}=(0,l.U)(),[y,v]=(0,r.useState)(k),w=[],{blockElementScrollPositionUntilNextRender:_}=(0,s.o5)();if(null!=m){const e=N[m];null!=e&&e!==y&&c.some((t=>t.value===e))&&v(e)}const T=e=>{const t=e.currentTarget,n=w.indexOf(t),a=c[n].value;a!==y&&(_(t),v(a),null!=m&&b(m,a))},I=e=>{let t=null;switch(e.key){case"ArrowRight":{const n=w.indexOf(e.currentTarget)+1;t=w[n]||w[0];break}case"ArrowLeft":{const n=w.indexOf(e.currentTarget)-1;t=w[n]||w[w.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,p.Z)("tabs-container",d.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":n},g)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>w.push(e),onKeyDown:I,onFocus:T,onClick:T},o,{className:(0,p.Z)("tabs__item",d.tabItem,o?.className,{"tabs__item--active":y===t})}),n??t)}))),t?(0,r.cloneElement)(h.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function m(e){const t=(0,o.Z)();return r.createElement(u,(0,a.Z)({key:String(t)},e))}},940:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var a=n(7462),r=(n(7294),n(3905)),o=n(9877),i=n(2360);const l={sidebar_position:8},s="Writing a useful conversion program",p={unversionedId:"programming/programming_with_gene_annotations3/Converting_gff_to_sqlite",id:"programming/programming_with_gene_annotations3/Converting_gff_to_sqlite",title:"Writing a useful conversion program",description:"Your R package (or python module) is already useful!  To demonstrate this, let's use it to write a command-line",source:"@site/docs/programming/programming_with_gene_annotations3/008_Converting_gff_to_sqlite.md",sourceDirName:"programming/programming_with_gene_annotations3",slug:"/programming/programming_with_gene_annotations3/Converting_gff_to_sqlite",permalink:"/whg-training-resources/programming/programming_with_gene_annotations3/Converting_gff_to_sqlite",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/programming_with_gene_annotations3/008_Converting_gff_to_sqlite.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"sidebar5",previous:{title:"Making a module",permalink:"/whg-training-resources/programming/programming_with_gene_annotations3/making_a_module"},next:{title:"Challenge questions",permalink:"/whg-training-resources/programming/programming_with_gene_annotations3/challenge_questions"}},d={},u=[{value:"How we&#39;ll run the program",id:"how-well-run-the-program",level:2},{value:"Implementing the program",id:"implementing-the-program",level:2},{value:"Importing our code",id:"importing-our-code",level:3},{value:"Adding command-line arguments",id:"adding-command-line-arguments",level:3},{value:"Running it",id:"running-it",level:3},{value:"Implementing the main function",id:"implementing-the-main-function",level:2},{value:"Parsing the data",id:"parsing-the-data",level:3},{value:"Adding the dataset name",id:"adding-the-dataset-name",level:3},{value:"Outputting to sqlite",id:"outputting-to-sqlite",level:3},{value:"Adding an index",id:"adding-an-index",level:3},{value:"Closing the connection",id:"closing-the-connection",level:3},{value:"Running <code>process()</code>",id:"running-process",level:3},{value:"The whole program",id:"the-whole-program",level:2},{value:"Trying it out for real",id:"trying-it-out-for-real",level:3},{value:"Making it better for the user",id:"making-it-better-for-the-user",level:3},{value:"Using the program",id:"using-the-program",level:2},{value:"Final touches",id:"final-touches",level:2}],m={toc:u},g="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(g,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"writing-a-useful-conversion-program"},"Writing a useful conversion program"),(0,r.kt)("p",null,"Your R package (or python module) is already useful!  To demonstrate this, let's use it to write a ",(0,r.kt)("strong",{parentName:"p"},"command-line\nutility")," - a program you can run on the command-line to do something useful."),(0,r.kt)("p",null,"Specifically let's write a program to convert a GFF file to the ",(0,r.kt)("a",{parentName:"p",href:"https://www.sqlite.org"},"sqlite database")," format. There\nare lots of good reasons to do this.  One of them is that ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlite")," will make it easy to load the data from\nalmost any language without having to re-write another ",(0,r.kt)("inlineCode",{parentName:"p"},"parse_gff3_to_dataframe()")," function. It will make it easy to\nload bits of data we want, solving the issues of using lots of memory that we encountered earlier."),(0,r.kt)("h2",{id:"how-well-run-the-program"},"How we'll run the program"),(0,r.kt)("p",null,"We will develop this a bit differently to the previous code (for which you may have used Jupyter lab, for example, to\nwork semi-interactively). Here we are writing a program so you'll want to create a new blank file ",(0,r.kt)("inlineCode",{parentName:"p"},"gff_to_sqlite.R"),"\nwhich we will edit."),(0,r.kt)("p",null,"Ultimately we are aiming to use the file like this (from the command-line):"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"Rscript --vanilla gff_to_sqlite.R --input my_file.gff --output genes.sqlite\n")),(0,r.kt)("p",null,"Here ",(0,r.kt)("inlineCode",{parentName:"p"},"Rscript --vanilla")," is the R way of running a script on the command line, ",(0,r.kt)("inlineCode",{parentName:"p"},"gff_to_sqlite.R")," is our program,\nand the other parts are the command-line options."),(0,r.kt)("p",null,"To get started, create a new R file named ",(0,r.kt)("inlineCode",{parentName:"p"},"gff_to_sqlite.R")," in your editor now.")),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"python gff_to_sqlite.py --input my_file.gff --output genes.sqlite\n")),(0,r.kt)("p",null,"Here ",(0,r.kt)("inlineCode",{parentName:"p"},"python")," (or you may need ",(0,r.kt)("inlineCode",{parentName:"p"},"python3"),") is the python program, ",(0,r.kt)("inlineCode",{parentName:"p"},"gff_to_sqlite.py")," is our program,\nand the other parts are the command-line options."))),(0,r.kt)("h2",{id:"implementing-the-program"},"Implementing the program"),(0,r.kt)("p",null,"To get started, create a new R file named 'gff_to_sqlite.py' in your editor now."),(0,r.kt)("p",null,"In the next few sections we'll walk through several bits that we will need to add to make our program work well:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"code to parse the command-line arguments"),(0,r.kt)("li",{parentName:"ul"},"code to load the data"),(0,r.kt)("li",{parentName:"ul"},"code to save the data again"),(0,r.kt)("li",{parentName:"ul"},"code that prints nice messages to the users.")),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Remember, on this page we are writing a command-line program, so you should use a text edit to add the code to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"gff_to_sqlite.R")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"gff_to_sqlite.py")," file, and run it from the command-line. It won't work the same way if you try to\nrun it in an interactive session."))),(0,r.kt)("p",null,"Let's get started!"),(0,r.kt)("h3",{id:"importing-our-code"},"Importing our code"),(0,r.kt)("p",null,"The first thing we'll need to do is import the libraries we need - including our ",(0,r.kt)("strong",{parentName:"p"},"gmsgff")," library.  This is easy:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"library( tidyverse )\nlibrary( RSQLite )\nlibrary( gmsgff )\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import os\nimport sqlite3\nimport gmsgff\n")))),(0,r.kt)("h3",{id:"adding-command-line-arguments"},"Adding command-line arguments"),(0,r.kt)("p",null,"Our program will take an ",(0,r.kt)("em",{parentName:"p"},"input")," argument telling it where to find the input GFF file, and and ",(0,r.kt)("em",{parentName:"p"},"output")," argument telling\nit where to put the output.  To get these into our program we'll use the ",(0,r.kt)("strong",{parentName:"p"},"argparse")," library. I find the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/argparse.html"},"argparse\ndocumentation")," a bit confusing, so here is a quick head start:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'\nparse_arguments = function() {\n    library( argparse )\n    parser = ArgumentParser(\n        description = "Convert a GFF3 file to sqlite3 format. The result will be a table with the GFF3 fields, and with ID and Parent fields in columns."\n    )\n    parser$add_argument(\n        \'--input\',\n        type = "character",\n        help = "The path of a GFF3-formatted file to work with",\n        required = TRUE\n    )\n    # add other needed arguments here\n    return( parser$parse_args() )\n}\n\nargs = parse_arguments()\n'))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\ndef parse_arguments():\n    import argparse\n    parser = argparse.ArgumentParser(\n        description = """Convert a GFF3 file to sqlite3 format.\n        The result will be a table with the GFF3 fields, and with ID and Parent fields in columns.\n        """\n    )\n    parser.add_argument(\n        \'--input\',\n        help =\'The path of a GFF3-formatted file to work with\',\n        required = True\n    )\n    # add other needed arguments here\n    return parser.parse_args()\n\nargs = parse_arguments()\n')))),(0,r.kt)("h3",{id:"running-it"},"Running it"),(0,r.kt)("p",null,"Your program is already runnable! Try it from a command-line:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"Rscript --vanilla gff_to_sqlite.R\n")),(0,r.kt)("p",null,"If all goes well you will see something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"usage: ./gff_to_sqlite.R [-h] --input INPUT\n./gff_to_sqlite.R: error: the following arguments are required: --input\nExecution halted\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note.")," you may have to install the argparse and RSQLite packages first.")),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"python gff_to_sqlite.py\n")),(0,r.kt)("p",null,"If all goes well you will see something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ python3 gff_to_sqlite.py \nusage: gff_to_sqlite.py [-h] --input INPUT\ngff_to_sqlite.py: error: the following arguments are required: --input\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note.")," you may have to install the argparse package first."))),(0,r.kt)("p",null,"So it works!  And it correctly tells us that we haven't specified any command line- arguments. "),(0,r.kt)("p",null,"(What does it do if you give it an argument i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"--input my_file.txt"),"?)"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Challenge")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Our program also needs an ",(0,r.kt)("inlineCode",{parentName:"p"},"--output")," option to tell it where to store the output.  Can you add that to\n",(0,r.kt)("inlineCode",{parentName:"p"},"parse_arguments()")," now?"))),(0,r.kt)("h2",{id:"implementing-the-main-function"},"Implementing the main function"),(0,r.kt)("p",null,"Our program runs, but doesn't do anything.  To make it do something let's write a ",(0,r.kt)("inlineCode",{parentName:"p"},"process()")," function that does the\nmain work."),(0,r.kt)("p",null,"Implementing this function will actually be pretty easy. We need to read in the data using our module, and write it out\nto the database using the dataframe library.  Then there are a couple of tweaks we should make including"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"adding a column to tell us where the data came from"),(0,r.kt)("li",{parentName:"ul"},"adding some database indexes (optional, but sensible).")),(0,r.kt)("p",null,"Let's do this now by writing a function called ",(0,r.kt)("inlineCode",{parentName:"p"},"process()")," which takes in the arguments and does the work:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"process = function( args ) {\n    # (parse the data and write the output here)\n}\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"def process( args ):\n    # (parse the data and write the output here)\n")))),(0,r.kt)("p",null,"Let's write ",(0,r.kt)("inlineCode",{parentName:"p"},"process()")," now.  Add the following pieces of code into the function body:"),(0,r.kt)("h3",{id:"parsing-the-data"},"Parsing the data"),(0,r.kt)("p",null,"This is easy right?  Use your function to do it.  The correct filename is the one we read in from the command-line arguments."),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"data = gmsgff::parse_gff3_to_dataframe( args$input )\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"data = gmsgff.parse_gff3_to_dataframe( args.input )\n")))),(0,r.kt)("h3",{id:"adding-the-dataset-name"},"Adding the dataset name"),(0,r.kt)("p",null,"Let's add the input filename, suitably processed, as a column called ",(0,r.kt)("inlineCode",{parentName:"p"},"dataset"),", so we can remember where it came\nfrom. Because this involves a few steps, let's put it in a seperate function:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'get_dataset_name = function( filename ) {\n    # Get the input name without directories\n    result = basename( filename )\n    # Get rid of the .gff suffix using a \'regular expression\'\n    # [.] matches a dot\n    # [^.]* matches any number of things that are NOT dots\n    # $ matches the end of the string\n    result = gsub( "[.][^.]*$", "", result )\n    return( result )\n}\n'))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\ndef get_dataset_name( filename ):\n    # Get the input name without directories\n    result = os.path.basename( args.input )\n    # Get rid of the .gff suffix\n    # python has a function for this\n    result = os.path.splitext( result )[0]\n    return( result )\n")))),(0,r.kt)("p",null,"And now inside ",(0,r.kt)("inlineCode",{parentName:"p"},"process()")," let's add it as a column:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"add_column(\n    data,\n    dataset = get_dataset_name( args.input ),\n    .before = 1\n)\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"data.insert(\n    loc = 0,\n    column = 'name',\n    value = get_dataset_name( args.input )\n)\n")))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This is the same syntax we used to add columns on the ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations3/extracting_attributes"},"earlier page")," page."))),(0,r.kt)("h3",{id:"outputting-to-sqlite"},"Outputting to sqlite"),(0,r.kt)("p",null,"This turns out to be very easy too.  You have to open the database, then write a table to it:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'# Write the data to the database in a table called "gff"\ndb = DBI::dbConnect(RSQLite::SQLite(), args$output )\ndbWriteTable(\n    db,\n    "gff",\n    data,\n    row.names = FALSE\n)\n\n')),(0,r.kt)("p",null,"We will also add an ",(0,r.kt)("inlineCode",{parentName:"p"},"append = TRUE")," argument to the above, so that more than one file can be added to the same database.")),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("p",null,"Pandas dataframes have a ",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_sql.html"},(0,r.kt)("inlineCode",{parentName:"a"},".to_sql()"),"\nfunction")," that does this for\nyou. To make this work, you open the database and then run it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'db = sqlite3.connect( args.output )\ndata.to_sql( "gff", db, index = False )\n')),(0,r.kt)("p",null,"We will also add the ",(0,r.kt)("inlineCode",{parentName:"p"},'if_exists = "append"')," argument to the above, so that more than one file can be added to the same database."))),(0,r.kt)("h3",{id:"adding-an-index"},"Adding an index"),(0,r.kt)("p",null,"To maximise the benefit of sqlite it's best to add ",(0,r.kt)("strong",{parentName:"p"},"indexes")," on the table (this lets it look up genes quickly by ",(0,r.kt)("inlineCode",{parentName:"p"},"ID"),"\nor ",(0,r.kt)("inlineCode",{parentName:"p"},"Parent")," fields).  Let's do this now by running a SQL command:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'dbGetQuery( db, "CREATE INDEX IF NOT EXISTS gff_id_index ON gff( ID )" )\ndbGetQuery( db, "CREATE INDEX IF NOT EXISTS gff_parent_index ON gff( Parent )" )\n'))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'db.execute( "CREATE INDEX IF NOT EXISTS gff_id_index ON gff( ID )" )\ndb.execute( "CREATE INDEX IF NOT EXISTS gff_parent_index ON gff( Parent )" )\n')))),(0,r.kt)("h3",{id:"closing-the-connection"},"Closing the connection"),(0,r.kt)("p",null,"We're also meant to close the connection at the end:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"dbDisconnect( db )\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"db.close()\n")))),(0,r.kt)("p",null,"Put that all into your ",(0,r.kt)("inlineCode",{parentName:"p"},"process()")," function (",(0,r.kt)("strong",{parentName:"p"},"Note"),": remember to keep the correct indent in python, and remember the closing brace for the function in R!)"),(0,r.kt)("h3",{id:"running-process"},"Running ",(0,r.kt)("inlineCode",{parentName:"h3"},"process()")),(0,r.kt)("p",null,"Finally, since all the above wasq inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"process()")," function, don't forget to call process:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"process( args )\n")),(0,r.kt)("h2",{id:"the-whole-program"},"The whole program"),(0,r.kt)("p",null,"If you've followed so far, you should have a file ",(0,r.kt)("inlineCode",{parentName:"p"},"gff_to_sqlite.py")," that looks something like this:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'library( tidyverse )\nlibrary( RSQLite )\nlibrary( gmsgff )\n\nparse_arguments = function() {\n    library( argparse )\n    parser = ArgumentParser(\n        description = "Convert a GFF3 file to sqlite3 format. The result will be a table with the GFF3 fields, and with ID and Parent fields in columns."\n    )\n    parser$add_argument(\n        \'--input\',\n        type = "character",\n        help = "The path of a GFF3-formatted file to work with",\n        required = TRUE\n    )\n    parser$add_argument(\n        \'--output\',\n        type = "character",\n        help = "The path to the output file.",\n        required = TRUE\n    )\n    return( parser$parse_args() )\n}\n\nget_dataset_name = function( filename ) {\n    # Get the input name without directories\n    result = basename( filename )\n    # Get rid of the .gff suffix using a \'regular expression\'\n    # [.] matches a dot\n    # [^.]* matches any number of things that are NOT dots\n    # $ matches the end of the string\n    result = gsub( "[.][^.]*$", "", result )\n    return( result )\n}\n\nprocess = function( args ) {\n    data = gmsgff::parse_gff3_to_dataframe( args$input )\n\n    # Add the dataset name as a column\n    data = add_column(\n        data,\n        dataset = get_dataset_name( args$input ),\n        .before = 1\n    )\n\n    # Write the data to the database\n    db = DBI::dbConnect(RSQLite::SQLite(), args$output )\n    dbWriteTable(\n        db,\n        "gff",\n        data,\n        row.names = FALSE,\n        append = TRUE\n    )\n\n    # Create the indexes\n    dbGetQuery( db, "CREATE INDEX IF NOT EXISTS gff_id_index ON gff( ID ))" )\n    dbGetQuery( db, "CREATE INDEX IF NOT EXISTS gff_parent_index ON gff( Parent ))" )\n\n    # close the connection\n    dbDisconnect( db )\n}\n\nargs = parse_arguments()\nprocess( args )\n\n'))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import os\nimport sqlite3\nimport gmsgff\n\ndef parse_arguments():\n    import argparse\n    parser = argparse.ArgumentParser(\n        description = """Convert a GFF3 file to sqlite3 format.\n        The result will be a table with the GFF3 fields, and with ID and Parent fields in columns.\n        """\n    )\n    parser.add_argument(\n        \'--input\',\n        help =\'The path of a GFF3-formatted file to work with\',\n        required = True\n    )\n    parser.add_argument(\n        \'--output\',\n        help = "The path to the output file",\n        required = True\n    )\n    return parser.parse_args()\n\ndef get_dataset_name( filename ):\n    # Get the input name without directories\n    result = os.path.basename( args.input )\n    # Get rid of the .gff suffix - python has a function for this\n    result = os.path.splitext( result )[0]\n    return( result )\n\ndef process( args ):\n    data = gmsgff.parse_gff3_to_dataframe( args.input )\n\n    # Add the source as a column\n    data.insert( loc = 0, column = \'dataset\', value = get_dataset_name( args.input ) )\n\n    # Write the data to the database\n    db = sqlite3.connect( args.output )\n    data.to_sql( "gff", db, index = False, if_exists = "append" )\n\n    # Create the indexes\n    db.execute( "CREATE INDEX IF NOT EXISTS gff_id_index ON gff( ID )" )\n    db.execute( "CREATE INDEX IF NOT EXISTS gff_parent_index ON gff( Parent )" )\n\n    # close the database\n    db.close()\n\nargs = parse_arguments()\nprocess( args )\n\n')))),(0,r.kt)("p",null,"Congratulations!"),(0,r.kt)("p",null,"Test it out in your shell again without any arguments, to see what happens."),(0,r.kt)("h3",{id:"trying-it-out-for-real"},"Trying it out for real"),(0,r.kt)("p",null,"Now try running it on some real data:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"Rscript --vanilla ./gff_to_sqlite.py --input gencode.v41.annotation.gff3 --output genes.sqlite\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"python ./gff_to_sqlite.py --input gencode.v41.annotation.gff3.gz --analysis_name Pf3D7 --output genes.sqlite\n")))),(0,r.kt)("p",null,"Does it work?"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If it didn't work, look carefully back at the error message and/or go back and check the code carefully."),(0,r.kt)("p",{parentName:"div"},"In python, remember you ",(0,r.kt)("strong",{parentName:"p"},"must be consistent about indenting the code")," - use either spaces or tabs and stick to it throughout."))),(0,r.kt)("p",null,"Check how big the sqlite file is.  Is it larger or smaller than the input file?\n(What about if you uncompress the input file first?)"),(0,r.kt)("h3",{id:"making-it-better-for-the-user"},"Making it better for the user"),(0,r.kt)("p",null,"Is this good enough?  No!  Your program runs, but it's not very nice to the user. In fact in the version above we put in\nall those comments - it's much nicer to turn these into messages for the user instead."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Challenge")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Make your program print out useful information to the user as it runs.  For example, it should tell the user what it's doing and tell it if it succeeded and so on."),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("p",{parentName:"div"},"In R a useful function is this one which works a bit like 'echo' in BASH:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-r"},"echo = function( message, ... ) {\n    cat( sprintf( message, ... ))\n}\n")),(0,r.kt)("p",{parentName:"div"},"You can use it to print out messages, for example:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-r"},'echo( "Welcome to gff_to_sqlite.R\\n" )\n')),(0,r.kt)("p",{parentName:"div"},"Or messages with values, for example:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-r"},'echo( "Successfully loaded data from \'%s\'\\n", args$input )\necho( "Data had %d rows and %d columns.\\n", nrow( data ), nrow( data ))\n')),(0,r.kt)("p",{parentName:"div"},"(The ",(0,r.kt)("inlineCode",{parentName:"p"},"\\n"),"s are needed at the end of each row here to make sure they end in a newline character.)"),(0,r.kt)("p",{parentName:"div"},"(To print out data itself, use ",(0,r.kt)("inlineCode",{parentName:"p"},"print()"),".)")),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("p",{parentName:"div"},"In python the ",(0,r.kt)("inlineCode",{parentName:"p"},"print()")," function is good for printing out messages, as in:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print( "Welcome to gff_to_sqlite.R" )\n')),(0,r.kt)("p",{parentName:"div"},"Or messages with values, for example:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},'print( "Successfully loaded data from \'%s\'" % args$input )\nprint( "Data had %d rows and %d columns." % ( nrow( data ), nrow( data )))\n')),(0,r.kt)("p",{parentName:"div"},"print( )"))),(0,r.kt)("p",{parentName:"div"},(0,r.kt)("strong",{parentName:"p"},"Note"),". The secret to formatting with ",(0,r.kt)("inlineCode",{parentName:"p"},"print()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"echo()")," is to use the ",(0,r.kt)("strong",{parentName:"p"},"format string syntax"),".  A ",(0,r.kt)("inlineCode",{parentName:"p"},"%d")," in the\nformat string indicates the value should dbe filled in from the corresponding vairable which must be an ",(0,r.kt)("strong",{parentName:"p"},"integer\nvalue"),". A ",(0,r.kt)("inlineCode",{parentName:"p"},"%s")," indicates it should instead be a ",(0,r.kt)("strong",{parentName:"p"},"string value"),".  (And a ",(0,r.kt)("inlineCode",{parentName:"p"},"%f")," indicates a floating-point number, but\nwe didn't use one of those in the examples above.)"))),(0,r.kt)("p",null,"Once you have done this your program will probably look something like this:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/whg-training/whg-training-resources/tree/main/docs/programming/programming_with_gene_annotations3/code/gff_to_sqlite.R"},"The completed R program"),".  ")),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/whg-training/whg-training-resources/tree/main/docs/programming/programming_with_gene_annotations3/code/gff_to_sqlite.py"},"The completed python program"),"."))),(0,r.kt)("p",null,"And running it should produce nice output, something like this:"),(0,r.kt)(o.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"% Rscript --vanilla ~/Projects/teaching/gms/whg-training-resources/docs/programming/programming_with_gene_annotations3/code/gff_to_sqlite.R --input gencode.v41.annotation.gff3 --output genes.sqlite\n++ Welcome to gff_to_sqlite.R!\n++ gff_to_sqlite.R: processing...\n++ process(): loading data from 'gencode.v41.annotation.gff3'...\n++ ok, loaded 3373604 rows and 11 columns of data.\nfirst few rows are:\n# A tibble: 6 \xd7 11\n  seqid source type       start   end score strand phase attributes ID    Parent\n  <chr> <chr>  <chr>      <int> <dbl> <dbl> <chr>  <int> <chr>      <chr> <chr> \n1 chr1  HAVANA gene       11869 14409    NA +         NA ID=ENSG00\u2026 ENSG\u2026 NA    \n2 chr1  HAVANA transcript 11869 14409    NA +         NA ID=ENST00\u2026 ENST\u2026 ENSG0\u2026\n3 chr1  HAVANA exon       11869 12227    NA +         NA ID=exon:E\u2026 exon\u2026 ENST0\u2026\n4 chr1  HAVANA exon       12613 12721    NA +         NA ID=exon:E\u2026 exon\u2026 ENST0\u2026\n5 chr1  HAVANA exon       13221 14409    NA +         NA ID=exon:E\u2026 exon\u2026 ENST0\u2026\n6 chr1  HAVANA transcript 12010 13670    NA +         NA ID=ENST00\u2026 ENST\u2026 ENSG0\u2026\n++ process(): Adding source filename as a column...\n++ process(): Writing data to 'genes.sqlite', gff table...\n++ process(): ok, adding indexes...\n++ process(): success.\n++ Success!\n++ Thank you for using gff_to_sqlite.R.\n"))),(0,r.kt)(i.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"% python3 ./gff_to_sqlite.py --input gencode.v41.annotation.gff3 --output genes.sqlite\n++ Welcome to gff_to_sqlite.py!\n++ gff_to_sqlite.py: processing...\n++ process(): loading data from 'gencode.v41.annotation.gff3'...\n++ ok, loaded 3373604 rows and 11 columns of data.\nfirst few rows are:\n                         ID             Parent seqid  source  ... score  strand  phase                                         attributes\n0         ENSG00000223972.5                NaN  chr1  HAVANA  ...   NaN       +    NaN  ID=ENSG00000223972.5;gene_id=ENSG00000223972.5...\n1         ENST00000456328.2  ENSG00000223972.5  chr1  HAVANA  ...   NaN       +    NaN  ID=ENST00000456328.2;Parent=ENSG00000223972.5;...\n2  exon:ENST00000456328.2:1  ENST00000456328.2  chr1  HAVANA  ...   NaN       +    NaN  ID=exon:ENST00000456328.2:1;Parent=ENST0000045...\n3  exon:ENST00000456328.2:2  ENST00000456328.2  chr1  HAVANA  ...   NaN       +    NaN  ID=exon:ENST00000456328.2:2;Parent=ENST0000045...\n4  exon:ENST00000456328.2:3  ENST00000456328.2  chr1  HAVANA  ...   NaN       +    NaN  ID=exon:ENST00000456328.2:3;Parent=ENST0000045...\n\n[5 rows x 11 columns]\n++ process(): Adding source filename as a column...\n++ process(): Writing data to 'genes_python.sqlite', gff table...\n++ process(): ok, adding indexes...\n++ process(): closing the database.\n++ Success!\n++ Thank you for using gff_to_sqlite.py!\n")))),(0,r.kt)("h2",{id:"using-the-program"},"Using the program"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Congratulations!"),"  Your program can now be used to import data from a gff file or gff files - into a single database."),(0,r.kt)("p",null,"Because we added that ",(0,r.kt)("inlineCode",{parentName:"p"},"dataset")," column - there's nothing to stop us loading multiple datasets into the same database\nfile.  Try it now - you should be able to write multiple files into the ",(0,r.kt)("inlineCode",{parentName:"p"},"genes.sqlite")," database."),(0,r.kt)("p",null,"You can always get the data back out of the database again using the ",(0,r.kt)("inlineCode",{parentName:"p"},"sqlite3")," command-line tool.  For example\nto get just the first 10 genes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"% sqlite3 -mode csv -header 'SELECT * FROM gff WHERE type =='gene' LIMIT 10'  genes.sqlite\n")),(0,r.kt)("p",null,"You can similarly load pieces of the data into R or python, or other languages.  For more examples of this see the\n",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations3/appendices/sqlite_access"},"appendix"),"."),(0,r.kt)("h2",{id:"final-touches"},"Final touches"),(0,r.kt)("p",null,"The program is already pretty useful.  But maybe it could be better?\nTry some ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations3/challenge_questions"},"challenge question")," to find out."))}h.isMDXComponent=!0}}]);
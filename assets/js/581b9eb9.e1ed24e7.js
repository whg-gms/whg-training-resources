"use strict";(self.webpackChunkwhg_training_resources=self.webpackChunkwhg_training_resources||[]).push([[1188],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(a),c=r,h=u["".concat(l,".").concat(c)]||u[c]||d[c]||i;return a?n.createElement(h,o(o({ref:t},m),{},{components:a})):n.createElement(h,o({ref:t},m))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},2360:(e,t,a)=>{a.d(t,{Z:()=>o});var n=a(7294),r=a(6010);const i={tabItem:"tabItem_OmH5"};function o(e){let{children:t,hidden:a,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:a},t)}},9877:(e,t,a)=>{a.d(t,{Z:()=>d});var n=a(7462),r=a(7294),i=a(2389),o=a(7392),s=a(7094),l=a(2466),p=a(6010);const m={tabList:"tabList_uSqn",tabItem:"tabItem_LplD"};function u(e){const{lazy:t,block:a,defaultValue:i,values:u,groupId:d,className:c}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=u??h.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),k=(0,o.l)(g,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===i?i:i??h.find((e=>e.props.default))?.props.value??h[0]?.props.value;if(null!==N&&!g.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:v,setTabGroupChoices:b}=(0,s.U)(),[f,w]=(0,r.useState)(N),y=[],{blockElementScrollPositionUntilNextRender:x}=(0,l.o5)();if(null!=d){const e=v[d];null!=e&&e!==f&&g.some((t=>t.value===e))&&w(e)}const _=e=>{const t=e.currentTarget,a=y.indexOf(t),n=g[a].value;n!==f&&(x(t),w(n),null!=d&&b(d,n))},I=e=>{let t=null;switch(e.key){case"ArrowRight":{const a=y.indexOf(e.currentTarget)+1;t=y[a]||y[0];break}case"ArrowLeft":{const a=y.indexOf(e.currentTarget)-1;t=y[a]||y[y.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,p.Z)("tabs-container",m.tabList)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,p.Z)("tabs",{"tabs--block":a},c)},g.map((e=>{let{value:t,label:a,attributes:i}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:f===t?0:-1,"aria-selected":f===t,key:t,ref:e=>y.push(e),onKeyDown:I,onFocus:_,onClick:_},i,{className:(0,p.Z)("tabs__item",m.tabItem,i?.className,{"tabs__item--active":f===t})}),a??t)}))),t?(0,r.cloneElement)(h.filter((e=>e.props.value===f))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==f})))))}function d(e){const t=(0,i.Z)();return r.createElement(u,(0,n.Z)({key:String(t)},e))}},3666:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var n=a(7462),r=(a(7294),a(3905)),i=a(9877),o=a(2360);const s={sidebar_position:4},l="Extracting the ID and Parent attributes",p={unversionedId:"programming/programming_with_gene_annotations3/extracting_attributes",id:"programming/programming_with_gene_annotations3/extracting_attributes",title:"Extracting the ID and Parent attributes",description:"If you followed the previous page, you'll have a function called",source:"@site/docs/programming/programming_with_gene_annotations3/004_extracting_attributes.md",sourceDirName:"programming/programming_with_gene_annotations3",slug:"/programming/programming_with_gene_annotations3/extracting_attributes",permalink:"/whg-training-resources/programming/programming_with_gene_annotations3/extracting_attributes",draft:!1,editUrl:"https://github.com/whg-training/whg-training-resources/edit/main/docs/programming/programming_with_gene_annotations3/004_extracting_attributes.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"sidebar5",previous:{title:"A first go at parsing GFF",permalink:"/whg-training-resources/programming/programming_with_gene_annotations3/Getting_started_writing_some_code"},next:{title:"Testing it out",permalink:"/whg-training-resources/programming/programming_with_gene_annotations3/testing_it_out"}},m={},u=[{value:"Extracting attributes",id:"extracting-attributes",level:2},{value:"An aside on timing",id:"an-aside-on-timing",level:2},{value:"Testing it out",id:"testing-it-out",level:2}],d={toc:u},c="wrapper";function h(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"extracting-the-id-and-parent-attributes"},"Extracting the ID and Parent attributes"),(0,r.kt)("p",null,"If you followed the ",(0,r.kt)("a",{parentName:"p",href:"/whg-training-resources/programming/programming_with_gene_annotations3/Getting_started_writing_some_code"},"previous page"),", you'll have a function called\n",(0,r.kt)("inlineCode",{parentName:"p"},"parse_gff3_to_dataframe()")," which ",(0,r.kt)("em",{parentName:"p"},"almost")," - but not quite - loads GFF data the way we want it."),(0,r.kt)("p",null,"What's missing is that we need to extract out attributes - in particular the ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Parent")," attributes that specify\nthe structure of the file.  As you saw before they are tucked away inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"attributes")," column."),(0,r.kt)("p",null,"For example look at the first of these - it will look something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\n> X$attributes[1]\n[1] "ID=ENSG00000223972.5;gene_id=ENSG00000223972.5;gene_type=transcribed_unprocessed_pseudogene;gene_name=DDX11L1;level=2;hgnc_id=HGNC:37102;havana_gene=OTTHUMG00000000961.2"\n\n')),(0,r.kt)("p",null,"The value is a big long string, separated by semicolons, and somewhere in there is the bit we want: ",(0,r.kt)("inlineCode",{parentName:"p"},"ID=ENSG......"),".  We\nalso want to get the ",(0,r.kt)("inlineCode",{parentName:"p"},"Parent")," attribute, which only exists in ",(0,r.kt)("em",{parentName:"p"},"some")," rows, because it indicates how the records are\nlinked together.  If it's not there, we should give it a missing value."),(0,r.kt)("p",null,"So we have to somehow split these bits out of the string.  How to do this?"),(0,r.kt)("h2",{id:"extracting-attributes"},"Extracting attributes"),(0,r.kt)("p",null,"It turns out there is a great tool for this type of job - ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Regular_expression"},(0,r.kt)("em",{parentName:"a"},"regular\nexpressions")),". Regular expressions are a language in their own right\nthat can be used to parse and extract pieces of text from larger strings.  It works like this: we define a regular\nexpression that captures the bit of the attributes we want to extract.  Then we use a functon to apply that to all of\nthe attributes strings in the dataframe."),(0,r.kt)("p",null,"For example, to capture a field of the form ",(0,r.kt)("inlineCode",{parentName:"p"},"ID=something;"),", we could use the basic regular expression:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"ID=([^;]+)\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"If you haven't used regular expressions before this might look pretty opaque!  But this is how regular expressions look; they are very short and compact but pack a lot in.  This one can be understood as follows:"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"The 'ID=' part looks for the exact string \"ID=\";"),(0,r.kt)("li",{parentName:"ul"},"The '","[","^;","]","+' part looks for a string of characters ",(0,r.kt)("strong",{parentName:"li"},"except")," semicolons.  (The ",(0,r.kt)("inlineCode",{parentName:"li"},"+")," means the string has to be at least one character long)."),(0,r.kt)("li",{parentName:"ul"},"And the parentheses ",(0,r.kt)("inlineCode",{parentName:"li"},"(")," and ",(0,r.kt)("inlineCode",{parentName:"li"},")")," tell the regexp to ",(0,r.kt)("em",{parentName:"li"},"capture")," (i.e. remember) whatever bit of the string matched.  (This is called a 'capture group')")),(0,r.kt)("p",{parentName:"div"},'So put together this says "find something of the form "ID=value", up to but not including any semicolon, and\nremember the value."'))),(0,r.kt)("p",null,"Let's test this out by making some dummy data with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," in different places in the string:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},'test_attributes = tibble(\n    attributes = c(\n        "a=b;ID=gene_1",\n        "ID=gene_2;a=b",\n        "ID=gene_3",\n        "a=b"\n    )\n)\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://stringr.tidyverse.org/reference/str_extract.html"},(0,r.kt)("inlineCode",{parentName:"a"},"str_extract()"))," function from the\n",(0,r.kt)("a",{parentName:"p",href:"https://stringr.tidyverse.org/index.html"},(0,r.kt)("inlineCode",{parentName:"a"},"stringr"))," library (part of tidyverse) can now be used to extract attributes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"str_extract(\n    test_attributes$attributes,\n    'ID=([^;]+)'\n)\n")),(0,r.kt)("p",null,"You should see something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'[1] "ID=gene_1" "ID=gene_2" "ID=gene_3" NA         \n')),(0,r.kt)("p",null,"This looks good - for example it has correctly returned a missing value (",(0,r.kt)("inlineCode",{parentName:"p"},"NA"),") for that last row where there was no ",(0,r.kt)("inlineCode",{parentName:"p"},"ID"),"\nattribute.  Check it carefully to make sure the others are correct."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Question")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Of course we want to only get the ",(0,r.kt)("em",{parentName:"p"},"value"),' in there - that is the bit in the capture "group" ',(0,r.kt)("inlineCode",{parentName:"p"},"([^;]+)"),". In fact\n",(0,r.kt)("a",{parentName:"p",href:"https://stringr.tidyverse.org/reference/str_extract.html"},(0,r.kt)("inlineCode",{parentName:"a"},"str_extract()"))," has an argument that can be used to do that"),(0,r.kt)("ul",{parentName:"div"},(0,r.kt)("li",{parentName:"ul"},"can you find it?  Add this and check that it gives the right answers."))))),(0,r.kt)(o.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'test_attributes = pandas.DataFrame( { "attributes": [\n    "a=b;ID=gene_1",\n    "ID=gene_2;a=b",\n    "ID=gene_3",\n    "a=b"\n] } )\n')),(0,r.kt)("p",null,"Let's try to extract the ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," from that test data:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"test_attributes[ 'attributes' ].str.extract( 'ID=([^;]+)' )\n")),(0,r.kt)("p",null,"This will print something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"        0\n0  gene_1\n1  gene_2\n2  gene_3\n3     NaN\n")),(0,r.kt)("p",null,"This looks good - for example it has correctly returned a missing value (",(0,r.kt)("inlineCode",{parentName:"p"},"NaN"),") for that last row where there was no ",(0,r.kt)("inlineCode",{parentName:"p"},"ID"),"\nattribute.  Check it carefully to make sure the others are correct."))),(0,r.kt)("p",null,"Getting our ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," field into a new column of ",(0,r.kt)("inlineCode",{parentName:"p"},"X")," is now easy.  (Since the ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," is so important, let's put it at the\nstart)."),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("p",null,"In R there are a few ways to do this.  For example let's do it by creating a new column ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," at the start with ",(0,r.kt)("inlineCode",{parentName:"p"},"NA"),"\nvalues, and then filling it with the values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"X = add_column( X, ID = NA, .before = 1 )\nX[['ID']] = str_extract(\n    X[['attributes']],\n    'ID=([^;]+)',\n    group = TRUE\n)\n\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note.")," In R, indexing ",(0,r.kt)("strong",{parentName:"p"},"starts at 1"),", so here ",(0,r.kt)("inlineCode",{parentName:"p"},".before = 1"),' means "place at the start".')),(0,r.kt)(o.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("p",null,"In pandas there are a few ways to do this.  For example let's do it by inserting a new column ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," at the start with  and then\nfilling it with the values:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"X.insert( loc = 0, column = 'ID', value = None )\nX['ID'] = X.attributes.str.extract( 'ID=([^;]+)' )\n")),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"In python, indexing ",(0,r.kt)("strong",{parentName:"p"},"starts at 0"),", so in the ",(0,r.kt)("inlineCode",{parentName:"p"},"insert()")," the first argument ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),' means "place the columns at the start".'))))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Thanks to Jonathan Chan for pointing out this neat way to extract attributes."))),(0,r.kt)("p",null,"Print out ",(0,r.kt)("inlineCode",{parentName:"p"},"X")," again to see your handiwork - there should be a new ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," column in there."),(0,r.kt)("h2",{id:"an-aside-on-timing"},"An aside on timing"),(0,r.kt)("p",null,"The full dataset has something like three million rows - that's a lot of data to process!\nSo how long does it take to extract these attributes?  Let's time it now:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("p",null,"In R a simple way to time some code is using ",(0,r.kt)("inlineCode",{parentName:"p"},"system.time()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"system.time({\n    X[['ID']] = str_extract(\n        X[['attributes']],\n        'ID=([^;]+)',\n        group = TRUE\n    )\n})\n"))),(0,r.kt)(o.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("p",null,"In python a simple way to time some code is using ",(0,r.kt)("inlineCode",{parentName:"p"},"time.time():")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"from time import time\nstart = time()\nX['ID'] = X.attributes.str.extract( 'ID=([^;]+)' )\nend = time()\nprint( \"Extracting the ID took %.2fs!\" % (end - start) )\n")))),(0,r.kt)("p",null,"On my laptop, the R version takes about 2 seconds (measuring 'elapsed' time), pretty consistently, while the python\nversion is slightly slower, and there are 34 million rows. So it is parsing over a million rows per second."),(0,r.kt)("p",null,"This is in fact one of the ",(0,r.kt)("strong",{parentName:"p"},"really good reasons")," to use regular expressions for this task.  They are ",(0,r.kt)("em",{parentName:"p"},"extremely")," well optimised.  For example, compare the speed of a naive implementation that tries to extract the ID attribute:"),(0,r.kt)(i.Z,{groupId:"language",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"R",label:"In R",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-r"},"# Extract the `ID` attribute by:\n# 1. splitting up the string on ';' characters\n# 2. Finding one that starts with \"ID=\"\n# 3. and using `substring()` to get the value:\nmy_naive_extract = function(x) {\n    elts = strsplit( x, split = ';', fixed = T )[[1]]\n    w = which( stringr::str_starts( elts, \"ID=\" ))\n    result = NA\n    if( length(w) == 1 ) {\n        result = substring( elts[w], 4 )\n    }\n    return( result )\n}\n")),(0,r.kt)("p",null,"To apply this to the whole column we can use ",(0,r.kt)("a",{parentName:"p",href:"https://purrr.tidyverse.org/reference/index.html"},(0,r.kt)("inlineCode",{parentName:"a"},"map()")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"system.time({\n    ID = map( X[['attributes']], my_naive_extract )\n})\n\n"))),(0,r.kt)(o.Z,{value:"python",label:"In python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\n# Extract the `ID` attribute by:\n# 1. splitting up the string on \';\' characters\n# 2. Finding one that starts with "ID="\n# 3. and using `substring()` to get the value:\ndef my_naive_extract(x):\n    elts = x.split( ";" )\n    found = [ elt for elt in elts if elt.startswith("ID=")]\n    result = None\n    if len(found) == 1:\n        result = found[0][3:]\n    return result\n\n')),(0,r.kt)("p",null,"To apply this to the whole column we can use pandas' ",(0,r.kt)("a",{parentName:"p",href:"https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.apply.html"},(0,r.kt)("inlineCode",{parentName:"a"},"apply()"),"\nfunction"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"\nstart = time()\nID = X['attributes'].apply( my_naive_extract )\nend = time()\nprint( \"Extracting the ID took %.2fs!\" % (end - start) )\n\n")))),(0,r.kt)("p",null,"On my system (an M1 mac) this 'naive' version takes about 80 seconds in R! (Though the python version is much better, at\naround 7 seconds.) So we have a table of timings, something like:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Language"),(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Best of three timings"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"R"),(0,r.kt)("td",{parentName:"tr",align:null},"regex"),(0,r.kt)("td",{parentName:"tr",align:null},"1.8s")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"python"),(0,r.kt)("td",{parentName:"tr",align:null},"regex"),(0,r.kt)("td",{parentName:"tr",align:null},"2.6s")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"python"),(0,r.kt)("td",{parentName:"tr",align:null},"naive"),(0,r.kt)("td",{parentName:"tr",align:null},"6.0s")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"R"),(0,r.kt)("td",{parentName:"tr",align:null},"naive"),(0,r.kt)("td",{parentName:"tr",align:null},"78s")))),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This illustrates a key point when working with large genomic datasets: it's quite easy to find that things get really\nslow, and some care over implementation is often needed to speed them up again.  (Although 70s might not seem much in\nthe scheme of things, it's easily ennough for your mind to wander. Or imagine we were processing fifty files instead of\none...)"),(0,r.kt)("p",{parentName:"div"},"Particularly when working in interpreted languages like R or python, finding ways to write efficient code soon becomes\nimportant.  (For text manipulation, regex methods are often hard to beat.)"))),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Warning")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Apart from speed - you should also be worried about how much memory your process is using!"),(0,r.kt)("p",{parentName:"div"},"Check this now using your system's activity monitor or by running ",(0,r.kt)("inlineCode",{parentName:"p"},"top -u <username> -o '%MEM'")," (on linux) ",(0,r.kt)("inlineCode",{parentName:"p"},"top -U gav -o MEM")," (in Mac OS) in a terminal.  On my system, ",(0,r.kt)("strong",{parentName:"p"},"before")," running the above both R and python are\nusing somewhere around 2Gb of memory, while ",(0,r.kt)("em",{parentName:"p"},"after")," extracting the ID they are using about 2.4Gb each.  "),(0,r.kt)("p",{parentName:"div"},"This is closely related to speed, because if your system runs out of memory it will probably keep working but will start\nusing 'swap' space (on your hard drive).  At this point the code adn everything else on your laptop will likely start\nto slow down dramatically."))),(0,r.kt)("h2",{id:"testing-it-out"},"Testing it out"),(0,r.kt)("p",null,"Now you should be all set to get our function working!"),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Challenge")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},(0,r.kt)("strong",{parentName:"p"},"Get the function working"),", by following these steps:"),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add the above code to your ",(0,r.kt)("inlineCode",{parentName:"p"},"parse_gff3_to_dataframe()")," so that it adds the ",(0,r.kt)("inlineCode",{parentName:"p"},"ID")," attribute.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Don't forget to add the similar code to extract the ",(0,r.kt)("inlineCode",{parentName:"p"},"Parent")," attribute as well.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run the test:"))),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"test_parse_gff3_to_dataframe()\n")),(0,r.kt)("p",{parentName:"div"},"If all goes well you should see:"),(0,r.kt)("pre",{parentName:"div"},(0,r.kt)("code",{parentName:"pre"},"++ test_parse_gff3_to_dataframe(): Congratulations,all tests passed!\n")),(0,r.kt)("p",{parentName:"div"},"Congratulations!"))),(0,r.kt)("p",null,"If you get stuck - go on to the ",(0,r.kt)("a",{parentName:"p",href:"004_testing_it_out.md"},"next page"),"."))}h.isMDXComponent=!0}}]);